@layout TelerikLayout
@inherits LayoutComponentBase
@using Blazored.Toast.Configuration
@inject NavigationManager Navigation
@inject SCM_ThanhLong_Group.Service.Users_Service UserService
@inject Profile_Service profileService

<link href="/mahacss/mahapanna.css" rel="stylesheet" />
<style>

</style>


<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="3"
                IconType="Blazored.Toast.Configuration.IconType.FontAwesome"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

<div class="page background-main">
    <TelerikRootComponent>
    <div class="">
            <NavMenu />
    </div>
    
    <main>
            <div style="position: absolute; left:0; top: 0; height: 72px; background: transparent; border:none; backdrop-filter: blur(20px); background-image: linear-gradient(to right, rgba(13, 17, 22,0.3), rgba(13, 17, 22,0.3)); position: fixed; z-index: 3;" class="top-row px-4 navigation-top-menu">
            <span>Xin chào, @UserService.currentUserName!</span>
                <a href="/Home" class="btn btn-primary btn-ho-so ms-3">Hồ sơ</a>
                <button @onclick="HandleLogout" class="btn btn-secondary btn-dang-xuat ms-2">Đăng xuất</button>
        </div>

        <article style="margin-top: 72px;" class="content px-4">
            
            @Body
        </article>
    </main>
    </TelerikRootComponent>
</div>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            var currentUserName = await UserService.GetCurrentUserName();
            if (!string.IsNullOrEmpty(currentUserName))
            {
                UserService.currentUserName = currentUserName;
                StateHasChanged();
            }
            isInitialized = true;
        }
    }

    private async Task HandleLogout()
    {
        string userName = "C##" + UserService.currentUserName;
        await profileService.killSession(UserService.currentUserName);
        await UserService.Logout();
        Navigation.NavigateTo("/");
        StateHasChanged();
    }

}