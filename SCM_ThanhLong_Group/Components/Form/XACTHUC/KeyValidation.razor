@page "/validate-key"
@inject KeyValidationService ValidationService
@inject NavigationManager NavigationManager
@* @rendermode InteractiveServer *@
@inject KeyValidationService ValidationService
@inject VerificationService verificationService
@inject checkEmail checkmail
@using SCM_ThanhLong_Group.Components.Layout
@layout LoginLayout
@inject IToastService ToastService
@inject Users_Service Users_Service
@inject Users user
@inject Users user1
@inject NavigationManager NavigationManager
@inject NavigationManager Navigation
@using System.Net.Mail;

@using Oracle.ManagedDataAccess.Client;
@using SCM_ThanhLong_Group.Components.Connection;
@using SCM_ThanhLong_Group.Model;
@using System.Data;
@using System.Text
@using SCM_ThanhLong_Group.Components
@inject OracleDbConnection DbConnection
<link href="css/Xacthuc.css" rel="stylesheet" />
@* <script src="~/js/slider.js"defer></script> *@

<div class="container">
    <div class="content-box">
        @if (IsLocked && LockEndTime.HasValue && LockEndTime.Value > DateTime.Now)
        {
            var remainingTime = LockEndTime.Value - DateTime.Now;
            <p style="color: red;">Tài khoản đang bị khóa. Thử lại sau @($"{remainingTime.Minutes}:{remainingTime.Seconds}")</p>
        }
        <h2 class="title">Xác Thực Người Dùng</h2>
        <p style="color:forestgreen">@Message</p>
        <div class="input-section">
            <label for="userKey">Nhập Mã:</label>
            <input type="text" id="userKey" @bind="matext" class="input-key"/>
            <label for="userKey">Nhập khóa:</label>
            <input type="password" id="userKey" @bind="UserKey" placeholder="Nhập khóa..." class="input-key" disabled="@IsLocked" />

            <button @onclick="ValidateKey" class="btn-validate" disabled="@IsLocked">Kiểm tra</button>
            <button @onclick="SendGmail" class="btn-validate" disabled="@IsLocked">Lấy Mã</button>
            <button @onclick="ForgotKey" class="btn-forgot">Quên khóa</button>
        </div>

        <!-- Hiển thị thông báo -->
        @if (!string.IsNullOrEmpty(NotificationMessage))
        {
            <div class="notification @(NotificationType)">
                @NotificationMessage
            </div>
        }

        @* <!-- Kết quả hiển thị -->
        @if (IsEmpty)
        {
            <div class="result invalid-key">Không được để trống ô nhập khóa!</div>
        }
        @if (IsInvalidLength)
        {
            <div class="result invalid-key">Khóa phải đủ 8 ký tự!</div>
        } *@
      @*   @if (IsValid.HasValue && isVerified.HasValue)
        {
            <div class="result" style="color: @(IsValid.Value ? "green" : "red")">
                @if (IsValid.Value)
                {
                    <p>!Thanh cong: Chuyển trang sau: <span>@Countdown</span>s...</p>
                }
                else
                {
                    <p>Khóa không hợp lệ! Bạn còn @RemainingAttempts lần thử.</p>
                }
            </div>
        } *@
      
        <!-- Slider Thanh Long -->
        <div class=".dragon-fruit-slider">
            <div class="slider">
                <div class="slide">
                    <img src="./images/THANHLONG.jpg" alt="" />
                </div>
                <div class="slide">
                    <img src="./images/THANHLONK.jpg" alt="" />
                </div>
                <div class="slide">
                    <img src="./images/tl.jpg" alt="" />
                </div>
            </div>
            <div class="description">
                <h3>Trái Thanh Long</h3>
                <p>Thanh long là một loại trái cây nhiệt đới có hương vị ngọt dịu và nhiều chất dinh dưỡng. Thích hợp để ăn trực tiếp hoặc chế biến thành các món ăn ngon.</p>
            </div>
        </div>
    </div>
    
</div>

@code {
    private string Message { get; set; } = "";
    private string UserKey { get; set; } = "";
    private string matext { get; set; } = "";
    private bool? IsValid { get; set; } = null;
    private bool? isVerified { get; set; } = null;
    private bool? isGmail { get; set; } = null;
    private bool IsEmpty { get; set; } = false;
    private bool IsInvalidLength { get; set; } = false;
    private bool? IsGrantEmail { get; set; } = null;
    private int RemainingAttempts { get; set; } = 3;
    private bool IsLocked { get; set; } = false;
    private int LockDurationSeconds { get; set; } = 180; // 3 phút
    private int Countdown { get; set; } = 3;
    private Timer countdownTimer;
    private Timer lockTimer;

    private DateTime? LockEndTime { get; set; }
    private string NotificationMessage { get; set; } = string.Empty;
    private string NotificationType { get; set; } = string.Empty; // success, error, warning, info
    private readonly OracleDbConnection _dbConnection;

    protected override async Task OnInitializedAsync()
    {
        user.username = "sys";
        user.password = "sys";

    }
    // private async Task VerifyCode()
    // {
    //     // Mã hóa mã xác minh mới

    //     IsEmpty = false;
    //     if (string.IsNullOrWhiteSpace(matext))
    //     {
    //         IsEmpty = true;
    //         IsInvalidLength = false;
    //         isVerified = null;
    //         SetNotification("Không được để trống ô MA XAC MINH!", "warning");
    //         return;
    //     }
    //     // Kiểm tra mã xác minh người dùng nhập vào
    //     isVerified = await verificationService.CheckVerificationCodeAsync(matext);

    //     if (isVerified.Value)
    //     {
    //         ToastService.ShowSuccess("Mã xác minh hợp lệ!");
    //     }
    //     else
    //     {
    //         ToastService.ShowError("Mã xác minh không hợp lệ!");
    //     }
    // }

    private async Task SendGmail()
    {
        string currentUser = await Users_Service.GetCurrentUserName();
        string usergrant = ("C##" + currentUser).ToUpper();

        string encryptionKey = "TLADMIN1";
        string generatedCode = "";
        string gmail = "";
        IsGrantEmail = await checkmail.GrantUserAccess(usergrant);
        if(IsGrantEmail.Value)
        {
            gmail = await checkmail.layGmail(usergrant);
            Console.WriteLine("lay gmail thanh cong");
        }
       
        try
        {
            
            string dbaPrivilege = user.username.Equals("sys", StringComparison.OrdinalIgnoreCase) ? "SYSDBA" : null;
            using (OracleConnection conn = DbConnection.GetConnection(user.username, user.password, dbaPrivilege))
            {
                if (conn == null)
                {
                    Message= "Không thể kết nối đến cơ sở dữ liệu.";
                    return;
                }

                await conn.OpenAsync();

                // 1. Gọi thủ tục tạo mã
                using (var cmdGenerate = new OracleCommand("C##Admin.generate_verification_code", conn))
                {
                    cmdGenerate.CommandType = CommandType.StoredProcedure;
                    cmdGenerate.Parameters.Add("p_code", OracleDbType.Varchar2, 20).Direction = ParameterDirection.Output;

                    await cmdGenerate.ExecuteNonQueryAsync();

                    // Kiểm tra xem giá trị của p_code có null không
                    if (cmdGenerate.Parameters["p_code"].Value != null)
                    {
                        generatedCode = cmdGenerate.Parameters["p_code"].Value.ToString();
                    }
                    else
                    {
                        Message="Không tạo được mã xác thực.";
                        return;
                    }
                }
                if (encryptionKey.Length != 8)
                {
                    Message="Khóa DES phải có chiều dài chính xác 8 ký tự.";
                    return;
                }

                isGmail = await checkmail.checkEmailUser(gmail);
                if (isGmail.Value)
                {
                    
                    // 3. Gửi email
                    using (MailMessage mail = new MailMessage())
                    {
                        mail.From = new MailAddress("scmmanagesoftware@gmail.com");
                        mail.To.Add($"{gmail}");
                        mail.Subject = "Xác thực người dùng";
                        mail.Body = $"<h1>Mã của bạn: {generatedCode}</h1>";
                        mail.IsBodyHtml = true;

                        using (SmtpClient smtp = new SmtpClient("smtp.gmail.com", 587))
                        {
                            smtp.Credentials = new System.Net.NetworkCredential("scmmanagesoftware@gmail.com", "ihitdlowdisznbyg");
                            smtp.EnableSsl = true;
                            smtp.Send(mail);
                        }
                    }

                    Message = $"Vui lòng kiểm tra email {gmail}của bạn để lấy Mã Xác Thực! có hiệu lực 60s";
                    
                }
                else
                {
                    Message="Tài khoản chưa thiết lập gmail";
                   
                }
            }
        }
        catch (Exception ex)
        {
            Message = $"Lỗi: {ex.Message}";
        }
    }
    private async Task ValidateKey()
    {

        IsEmpty = false;
        IsValid = await ValidationService.ValidateKey(UserKey);
        isVerified = await verificationService.CheckVerificationCodeAsync(matext);

        if (IsLocked && LockEndTime.HasValue && LockEndTime.Value > DateTime.Now)
        {
            var remainingTime = LockEndTime.Value - DateTime.Now;
            ToastService.ShowError($"Tài khoản bị khóa! Vui lòng thử lại sau {remainingTime.Minutes}:{remainingTime.Seconds}.");
            return;
        }
        if (string.IsNullOrWhiteSpace(matext))
        {
            IsEmpty = true;
            IsInvalidLength = false;
            isVerified = null;
            SetNotification("Không được để trống ô MA XAC MINH!", "warning");
            return;
        }
        // Reset khóa nếu hết thời gian
        if (IsLocked && LockEndTime.HasValue && LockEndTime.Value <= DateTime.Now)
        {
            IsLocked = false;
            RemainingAttempts = 3;
        }

        if (string.IsNullOrWhiteSpace(UserKey))
        {
            IsEmpty = true;
            IsInvalidLength = false;
            IsValid = null;
            SetNotification("Không được để trống ô nhập khóa!", "warning");
            return;
        }
        if(!isVerified.Value)
        {
            SetNotification("MA XAC MINH KHONG DUNG!", "warning");
            return;
        }
        if (UserKey.Length != 8)
        {
            IsInvalidLength = true;
            IsEmpty = false;
            IsValid = null;
            SetNotification("Khóa phải đủ 8 ký tự!", "warning");
            return;
        }

        IsEmpty = false;
        IsInvalidLength = false;
        IsValid = await ValidationService.ValidateKey(UserKey);
        isVerified = await verificationService.CheckVerificationCodeAsync(matext);
       
        if (IsValid.HasValue && isVerified.HasValue && IsValid.Value && isVerified.Value)
        {
            SetNotification("Thanh cong! Chuyển trang sau 3 giây...", "success");
            StartCountdown();
        }
        else
        {
            RemainingAttempts--;
            SetNotification($"That bai! Bạn còn {RemainingAttempts} lần thử.", "error");
            if (RemainingAttempts <= 0) LockInputField();
           
        }
       

    }
   
    private async Task StartCountdown()
    {
        for (Countdown = 3; Countdown > 0; Countdown--)
        {
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1000);
        }
        NavigationManager.NavigateTo("/Home");
    }

    private async Task LockInputField()
    {
        SetNotification("Tài khoản đã bị khóa trong 3 phút. Vui lòng thử lại sau!", "error");
        IsLocked = true;
        RemainingAttempts = 0; // Hết lượt thử
        await InvokeAsync(StateHasChanged);

        await Task.Delay(LockDurationSeconds * 1000); // Tạm khóa trong 3 phút
        
        IsLocked = false;
        RemainingAttempts = 3; // Reset lượt thử
        await InvokeAsync(StateHasChanged);
        
    }

    private void ForgotKey()
    {
        SetNotification("Liên hệ quản trị viên để được cấp lại khóa!", "info");
    }

    private void SetNotification(string message, string type)
    {
        NotificationMessage = message;
        NotificationType = type;
        StateHasChanged();
    }
}
