@page "/dinhdanh"
@using SCM_ThanhLong_Group.Components.Layout
@layout LoginLayout
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IToastService ToastService
@inject Users_Service Users_Service
@inject Users user
@inject XacThucService XacThucService

<PageTitle>Dinhdanh</PageTitle>
<link href="xacthux.css" rel="stylesheet" />
<h2>Xac Thuc</h2>
<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="randomText">Đoạn mã ngẫu nhiên:</label>
                <textarea class="form-control" id="randomText" rows="3" @bind="randomText" disabled></textarea>
            </div>
            <div class="form-group">
                <label for="inputCode">Đoạn mã cần giải:</label>
                <textarea class="form-control" id="inputCode" rows="3" @bind="encryptedText" disabled></textarea>
            </div>
            <div class="form-group">
                <label for="outputCode">Đoạn mã sau khi giải:</label>
                <textarea class="form-control" id="outputCode" rows="3" @bind="decryptedText" disabled></textarea>
            </div>
            <div class="form-group">
                <label for="inputKey">Key:</label>
                <input type="text" class="form-control" id="inputKey" @bind="privateKey">
            </div>
            <button class="btn btn-primary" @onclick="MaHoa">Mã hóa</button>
            <button class="btn btn-primary" @onclick="GiaiMa">Giải mã</button>
            <button class="btn btn-secondary" @onclick="XacThuc">Xác thực</button>
        </div>
    </div>
</div>

@code {

    private string randomText = string.Empty;
    private string encryptedText = string.Empty;
    private string decryptedText = string.Empty;
    private string privateKey = string.Empty;

    private string usernameHolding;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user.username = "C##" + await Users_Service.GetCurrentUserName();
            user.password = await Users_Service.GetCurrentPassWord();
            randomText = XacThucService.GenerateRandomText(16);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error initializing: {ex.Message}");
        }

    }

    private async Task MaHoa()
    {
        try
        {
            if (string.IsNullOrEmpty(privateKey))

            {
                ToastService.ShowError("Vui lòng nhập khóa trước khi mã hóa.");
                return;
            }
            //bool isKeyValid = await XacThucService.ValidateKey(privateKey);
            usernameHolding=await XacThucService.GetUsernameByKeyValue(privateKey);

             if (usernameHolding == "NOT_FOUND")
             {
                 ToastService.ShowError("Khóa không hợp lệ.");

                 return;
             }
            encryptedText = XacThucService.EncryptAES(randomText, privateKey);
            ToastService.ShowSuccess("Mã hóa thành công!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Mã hóa thất bại: {ex.Message}");
        }
    }

    private async Task GiaiMa()
    {
        try
        {
            if (string.IsNullOrEmpty(encryptedText))
            {
                ToastService.ShowError("Không có đoạn mã nào để giải mã.");
                return;
            }
            usernameHolding = await XacThucService.GetUsernameByKeyValue(privateKey);
            if (usernameHolding == "NOT_FOUND")
            {
                ToastService.ShowError("Khóa không hợp lệ.");
                return;
            }
            decryptedText = XacThucService.Decrypt(encryptedText, privateKey);

            if (decryptedText == randomText)
            {
                ToastService.ShowSuccess("Giải mã thành công!");
            }
            else
            {
                ToastService.ShowError("Giải mã thất bại: Khóa không chính xác.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Giải mã thất bại: {ex.Message}");
        }
    }

    private async Task XacThuc()
    {
        try
        {
            usernameHolding = await XacThucService.GetUsernameByKeyValue(privateKey);
            if (usernameHolding == "NOT_FOUND")

            {
                ToastService.ShowError("Khóa không hợp lệ.");
                return;
            }
            string decryptedTextResult = XacThucService.Decrypt(encryptedText, privateKey);
            if (decryptedTextResult == randomText)
            {
                ToastService.ShowSuccess("Xác thực thành công!");

                Navigation.NavigateTo("/Home");
            }
            else
            {
                ToastService.ShowError("Xác thực thất bại: Đoạn mã sau khi giải không khớp.");
            }
        }

        catch (Exception ex)
        {
            ToastService.ShowError($"Xác thực thất bại: {ex.Message}");
        }

    }
}