@page "/nguoiguichukyso"
@using SCM_ThanhLong_Group.Service
@using System.Text
@inject IToastService toastService
@inject NavigationManager Navigation
@using BlazorDownloadFile
@inject IBlazorDownloadFileService downloadFileService

<style>
    /* Giao diện chung */
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-image: url('./images/phapluat3.jpg');
        background-size: cover;
        background-attachment: fixed;
    }

        /* Overlay để làm mờ hình nền */
        body::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5); /* Tạo hiệu ứng tối màu */
            z-index: 0;
        }

    /* Container chính */
    .container {
        background-color: rgba(255, 255, 255, 0.9); /* Làm mờ để hòa với nền */
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 700px;
        text-align: center;
        position: relative;
        z-index: 1;
    }

    /* Tiêu đề */
    h3 {
        font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', 'Script MT';
        font-size: 28px;
        color: #007bff;
        margin-bottom: 20px;
    }

    /* Form nhóm */
    .form-group {
        margin-bottom: 20px;
        text-align: left;
    }

        .form-group label {
            font-weight: bold;
            margin-bottom: 10px;
            display: block;
        }

        .form-group input[type="file"],
        .form-group input[type="text"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        .form-group input[type="file"] {
            padding: 5px;
        }

    /* Nút */
    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        font-weight: bold;
        border: none;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: #fff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-info {
        background-color: #17a2b8;
        color: #fff;
    }

        .btn-info:hover {
            background-color: #117a8b;
        }

    .btn-success {
        background-color: #28a745;
        color: #fff;
    }

        .btn-success:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .btn-success:hover:not(:disabled) {
            background-color: #218838;
        }

    .key-display {
        width: 100%;
        height: 120px; /* Chiều cao cố định */
        overflow: auto; /* Thêm thanh cuộn nếu nội dung dài */
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 14px;
        font-family: monospace; /* Phông chữ phù hợp với mã */
        background-color: #f9f9f9;
        color: #333;
        resize: none; /* Không cho phép người dùng thay đổi kích thước */
    }
</style>

<div class="container">
    <h3>KÝ SỐ HÓA ĐƠN</h3>

    <!-- Tạo cặp khóa RSA -->
    <div class="form-group">
        <button class="btn btn-primary" @onclick="GenerateKeys">Tạo cặp khóa RSA</button>
    </div>

    <div class="form-group">
        <label for="publicKey">Public Key:</label>
        <textarea id="publicKey" class="key-display" readonly>@publicKey</textarea>
        @if (!string.IsNullOrEmpty(publicKey))
        {
            <button class="btn btn-info" @onclick="DownloadPublicKey">Tải xuống Public Key</button>
        }
    </div>

    <!-- Tải lên Public Key -->
    <div class="form-group">
        <label for="publicKeyFile">Tải lên file Public key (.txt):</label>
        <InputFile OnChange="UploadPublicKeyFile" class="form-control" id="publicKeyFile" />
    </div>

    <!-- Hiển thị Private Key -->
    <div class="form-group">
        <label for="privateKey">Private Key:</label>
        <textarea id="privateKey" class="key-display" readonly>@privateKey</textarea>
        @if (!string.IsNullOrEmpty(privateKey))
        {
            <button class="btn btn-info" @onclick="DownloadPrivateKey">Tải xuống Private Key</button>
        }
    </div>

    <!-- Tải lên Private Key -->
    <div class="form-group">
        <label for="privateKeyFile">Tải lên file Private key (.txt):</label>
        <InputFile OnChange="UploadPrivateKeyFile" class="form-control" id="privateKeyFile" />
    </div>
    <hr style="border: 1px solid #ddd; margin: 20px 0;">

    <!-- Upload file hóa đơn -->
    <div class="form-group">
        <InputFile OnChange="UploadFile" />
        <p><strong>File tải lên:</strong> @uploadedFileName</p>
    </div>

    <!-- Nút Ký Số -->
    <div class="form-group">
        <button class="btn btn-success" @onclick="SignInvoice" disabled="@(uploadedFile == null)">Ký số</button>
    </div>
    <!-- Tải xuống hóa đơn đã ký -->
    @if (!string.IsNullOrEmpty(signedFilePath))
    {
        <div class="form-group">
            <a class="btn btn-info" href="@signedFilePath" download>Download Hóa đơn đã ký</a>
        </div>
    }
</div>
@code {
    private RSA_ChuKySo_Service rsaService = new RSA_ChuKySo_Service();
    private string? publicKey;
    private string? privateKey;
    private IBrowserFile? uploadedFile;
    private string? uploadedFileName;
    private string? signedFilePath;

    // Tạo cặp khóa RSA
    private void GenerateKeys()
    {
        var keys = rsaService.GenerateKeys();
        publicKey = keys.PublicKey;
        privateKey = keys.PrivateKey;
        toastService.ShowSuccess("Cặp khóa RSA đã được tạo thành công!");
    }

    // Xử lý khi người dùng tải file PDF lên
    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        uploadedFileName = uploadedFile.Name;
        toastService.ShowInfo($"File {uploadedFileName} đã được tải lên.");
        await Task.CompletedTask; // Thêm await để tránh cảnh báo CS1998
    }

    private async Task UploadPublicKeyFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        publicKey = Encoding.UTF8.GetString(memoryStream.ToArray());
        toastService.ShowInfo($"PublicKey đã được tải lên.");
    }

    private async Task UploadPrivateKeyFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        privateKey = Encoding.UTF8.GetString(memoryStream.ToArray());
        toastService.ShowInfo($"PrivateKey đã được tải lên.");
    }

    // Thực hiện ký số
    private async Task SignInvoice()
    {
        if (uploadedFile == null)
        {
            toastService.ShowError("Vui lòng tải lên file hóa đơn trước!");
            return;
        }

        try
        {
            // Đọc nội dung file PDF
            using var memoryStream = new MemoryStream();
            await uploadedFile.OpenReadStream().CopyToAsync(memoryStream);
            var fileContent = memoryStream.ToArray();

            // Tạo giá trị hash từ file PDF
            var hash = rsaService.ComputeHash(fileContent);

            // Mã hóa hash bằng khóa bí mật
            var signature = rsaService.SignData(hash, privateKey);

            // Lưu file đã ký
            var outputFilePath = Path.Combine("wwwroot", "SignedInvoices", $"{uploadedFileName}_Signed.pdf");
            var directoryPath = Path.GetDirectoryName(outputFilePath);
            if (directoryPath != null)
            {
                Directory.CreateDirectory(directoryPath);
            }
            rsaService.SaveSignedFile(fileContent, signature, outputFilePath);

            signedFilePath = $"/SignedInvoices/{uploadedFileName}_Signed.pdf";
            toastService.ShowSuccess("Hóa đơn đã được ký thành công!");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi ký số: {ex.Message}");
        }
    }

    // Tải xuống Public Key
    private async Task DownloadPublicKey()
    {
        if (!string.IsNullOrEmpty(publicKey))
        {
            var bytes = Encoding.UTF8.GetBytes(publicKey);
            await downloadFileService.DownloadFile("publicKey.txt", bytes, "text/plain");
        }
        else
        {
            toastService.ShowError("Public Key không tồn tại!");
        }
    }

    // Tải xuống Private Key
    private async Task DownloadPrivateKey()
    {
        if (!string.IsNullOrEmpty(privateKey))
        {
            var bytes = Encoding.UTF8.GetBytes(privateKey);
            await downloadFileService.DownloadFile("privateKey.txt", bytes, "text/plain");
        }
        else
        {
            toastService.ShowError("Private Key không tồn tại!");
        }
    }
}
