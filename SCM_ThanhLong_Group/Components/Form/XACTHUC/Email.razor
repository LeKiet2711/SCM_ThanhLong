@page "/Email"
@using System.Net.Mail;
@using SCM_ThanhLong_Group.Components.Layout
@layout LoginLayout
@inject NavigationManager NavigationManager
@inject checkEmail checkmailService
@inject NavigationManager Navigation
@inject Users_Service Users_Service
@inject Users user
@using Oracle.ManagedDataAccess.Client;
@using SCM_ThanhLong_Group.Components.Connection;
@using SCM_ThanhLong_Group.Model;
@using System.Data;
@using System.Text

@inject OracleDbConnection DbConnection
@* <h3>Email</h3>
<div>
    <button class="btn btn-primary" @onclick="SendGmail">Gửi Email</button>
    <p>@Message</p>
</div>
@code {
    private string Message { get; set; } = "";
    private string ma { get; set; } 
    protected override async Task OnInitializedAsync()
    {
        user.username = "C##" + await Users_Service.GetCurrentUserName();
        user.password = await Users_Service.GetCurrentPassWord();
    }
    private async Task SendGmail()
    {
        // string generatedCode = "";
        // string encryptedCode = "";
        // string encryptionKey = "TLADMIN1";
        // try
        // {
        //     using(MailMessage mail = new MailMessage())
        //     {
        //         mail.From = new MailAddress("ledinhquy.thd@gmail.com");
        //         mail.To.Add("ledinhquy1509@gmail.com");
        //         mail.Subject = "Xac thuc nguoi dung";
        //         mail.Body = "<h1>Ma cua ban la</h1>";
        //         mail.IsBodyHtml = true;

        //         using (SmtpClient smtp = new SmtpClient("smtp.gmail.com",587)){
        //             smtp.Credentials = new System.Net.NetworkCredential("ledinhquy.thd@gmail.com", "znzutistuyojriqk");
        //             smtp.EnableSsl = true;
        //             smtp.Send(mail);
        //             Message = "Hãy Kiem Tra Gmail";
        //         }
        //     }
        // }catch(Exception ex)
        // {
        //     Message = ex.Message;
        // }

    } *@
<h3>Gửi Email Xác Thực</h3>

<div>
    <button class="btn btn-primary" @onclick="SendGmail">Gửi Email</button>
    <p>@Message</p>
</div>
<div>
    <button class="btn btn-primary" @onclick="ChuyenTrang">Tiếp tục</button>
    
</div>
<div>

    <label>Nhập Gmail:</label>
    <input type="text" id="" @bind="data" class="input-key" />
 
</div>

@code {
    private string Message { get; set; } = "";
    private readonly OracleDbConnection _dbConnection;
    private string gmail { get; set; }
    private string data { get; set; }
    private string username{ get; set; }
    private string tk { get; set; }
    private bool? IsEmail { get; set; } = null;
    private bool IsEmpty { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        user.username = "sys";
        user.password = "sys";
    }
    private async Task SendGmail()
    {
        string gmail = data;
        string generatedCode = "";
        string encryptedCode = "";
        string encryptionKey = "TLADMIN1"; // Khóa DES cần 8 ký tự.
        string taikhoan = tk;
        try
        {
            string dbaPrivilege = user.username.Equals("sys", StringComparison.OrdinalIgnoreCase) ? "SYSDBA" : null;
            using (OracleConnection conn = DbConnection.GetConnection(user.username, user.password, dbaPrivilege))
            {
                if (conn == null)
                {
                    Message = "Không thể kết nối đến cơ sở dữ liệu.";
                    return;
                }

                await conn.OpenAsync();

                // 1. Gọi thủ tục tạo mã
                using (var cmdGenerate = new OracleCommand("C##Admin.generate_verification_code", conn))
                {
                    cmdGenerate.CommandType = CommandType.StoredProcedure;
                    cmdGenerate.Parameters.Add("p_code", OracleDbType.Varchar2, 20).Direction = ParameterDirection.Output;

                    await cmdGenerate.ExecuteNonQueryAsync();

                    // Kiểm tra xem giá trị của p_code có null không
                    if (cmdGenerate.Parameters["p_code"].Value != null)
                    {
                        generatedCode = cmdGenerate.Parameters["p_code"].Value.ToString();
                    }
                    else
                    {
                        Message = "Không tạo được mã xác thực.";
                        return;
                    }
                }
                if (encryptionKey.Length != 8)
                {
                    Message = "Khóa DES phải có chiều dài chính xác 8 ký tự.";
                    return;
                }
                // 2. Gọi thủ tục mã hóa DES
                // using (var cmdEncrypt = new OracleCommand("BEGIN :result := DES_PACKAGE.encrypt_data(:plaintext, :key); END;", conn))
                // {
                //     cmdEncrypt.CommandType = CommandType.Text;

                //     // Chuyển plaintext thành byte[] (RAW)
                //     byte[] plaintextBytes = Encoding.UTF8.GetBytes(generatedCode);  // Chuyển plaintext thành byte[]

                //     // Chuyển khóa (key) thành byte[] (RAW)
                //     byte[] keyBytes = Encoding.UTF8.GetBytes(encryptionKey);

                //     // Đảm bảo chiều dài khóa là 8 byte
                //     if (keyBytes.Length != 8)
                //     {
                //         Message = "Khóa DES phải có chiều dài chính xác 8 ký tự.";
                //         return;
                //     }

                //     // Thêm tham số vào câu lệnh
                //     cmdEncrypt.Parameters.Add("plaintext", OracleDbType.Raw).Value = plaintextBytes;
                //     cmdEncrypt.Parameters.Add("key", OracleDbType.Raw).Value = keyBytes;
                //     cmdEncrypt.Parameters.Add("result", OracleDbType.Raw, 2000).Direction = ParameterDirection.Output;

                //     // Thực thi lệnh và nhận kết quả
                //     await cmdEncrypt.ExecuteNonQueryAsync();

                //     // Lấy kết quả mã hóa và chuyển nó thành dạng chuỗi HEX
                //     byte[] encryptedBytes = (byte[])cmdEncrypt.Parameters["result"].Value;
                //     if (encryptedBytes != null)
                //     {
                //         encryptedCode = BitConverter.ToString(encryptedBytes).Replace("-", ""); // Chuyển mã hóa sang HEX
                //     }
                //     else
                //     {
                //         Message = "Lỗi trong việc mã hóa.";
                //         return;
                //     }
                // }
                IsEmail = await checkmailService.checkEmailUser(gmail);
                if (IsEmail.Value)
                {

                    // 3. Gửi email
                    using (MailMessage mail = new MailMessage())
                    {
                        mail.From = new MailAddress("ledinhquy.thd@gmail.com");
                        mail.To.Add($"{gmail}");
                        mail.Subject = "Xác thực người dùng";
                        mail.Body = $"<h1>Mã của bạn (mã hóa): {generatedCode}</h1>";
                        mail.IsBodyHtml = true;

                        using (SmtpClient smtp = new SmtpClient("smtp.gmail.com", 587))
                        {
                            smtp.Credentials = new System.Net.NetworkCredential("ledinhquy.thd@gmail.com", "znzutistuyojriqk");
                            smtp.EnableSsl = true;
                            smtp.Send(mail);
                        }
                    }

                    Message = "Hãy kiểm tra Gmail của bạn.";
                }
                else
                {
                    Message = "Vui long kiểm tra Gmail của bạn";
                }
            }
        }
        catch (Exception ex)
        {
            Message = $"Lỗi: {ex.Message}";
        }
    }
    
    private void ChuyenTrang()
    {
        NavigationManager.NavigateTo("/validate-key");
    }
}

}
