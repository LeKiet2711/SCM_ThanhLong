@page "/phanquyenuser"
@using SCM_ThanhLong_Group.Model
@inject Kho_Service khoService
@inject Users_Service user_Service
@inject ChucNang_Service chucNangService
@inject IToastService toastService
@inject Users user
@inject NavigationManager NavigationManager

<TelerikComboBox Data="@lstUser"
                 @Value="@user.username"
                 Filterable="true"
                 FilterOperator="@StringFilterOperator.Contains"
                 ValueField="username"
                 TextField="username"
                 Placeholder="Chọn user"
                 Width="340px"
                 ValueChanged="@(async args=>await OnUserSelected(args))">
    <ComboBoxSettings>
        <ComboBoxPopupSettings Height="250px" MaxHeight="300px" MinHeight="75px" />
    </ComboBoxSettings>
</TelerikComboBox>

<div style="overflow-x: auto; white-space: nowrap; margin-top:40px">
    <div style="display: inline-block; width: 900px;margin-right:20px">
        <table class="table">
            <thead>
                <tr>
                    <th>Table Name</th>
                    <th>Xem</th>
                    <th>Them</th>
                    <th>Sua</th>
                    <th>Xoa</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tablePermission in lstTables)
                {
                    <tr>
                        <td>@tablePermission.TableName</td>
                        @* <td>
                            <input type="checkbox" checked="@tablePermission.Xem" @onchange="async (e) => await UpdatePermission(tablePermission, (bool)((ChangeEventArgs)e).Value)" />
                        </td>
                        <td>
                            <input type="checkbox" checked="@tablePermission.Them" @onchange="async (e) => await UpdatePermission(tablePermission, (bool)((ChangeEventArgs)e).Value)" />
                        </td>
                        <td>
                            <input type="checkbox" checked="@tablePermission.Sua" @onchange="async (e) => await UpdatePermission(tablePermission, (bool)((ChangeEventArgs)e).Value)" />
                        </td>
                        <td>
                            <input type="checkbox" checked="@tablePermission.Xoa" @onchange="async (e) => await UpdatePermission(tablePermission, (bool)((ChangeEventArgs)e).Value)" />
                        </td> *@
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    private List<Users> lstUser = new List<Users>();
    private List<TablePermission> lstTables = new List<TablePermission>();
    Users userGet = new Users();
    private string[] permissions = { "Xem", "Them", "Sua", "Xoa" };
    private string? selectedPermission;

    private bool isUserActive;

    private string addModalClass = "";
    private string addModalDisplayStyle = "display:none";
    private string editModalClass = "";
    private string editModalDisplayStyle = "display:none";
    private string deleteModalClass = "";
    private string deleteModalDisplayStyle = "display:none";

    private string username;
    private string password;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user.username = "C##" + await user_Service.GetCurrentUserName();
            user.password = await user_Service.GetCurrentPassWord();
            lstUser = await user_Service.getAllData();
            InitializeTablePermissions();
        }
        catch (Exception ex)
        {
            // Xử lý lỗi nếu cần thiết
            NavigationManager.NavigateTo("/Error");
        }
    }


    private void InitializeTablePermissions()
    {
        lstTables = new List<TablePermission>
        {
            new TablePermission { TableName = "KHUVUCTRONG" },
            new TablePermission { TableName = "KHO" },
            new TablePermission { TableName = "HOTRONG" },
            new TablePermission { TableName = "LOTHANHLONG" }
        };
    }

    // private async Task UpdatePermission(TablePermission tablePermission, bool isGranted)
    // {
    //     if (user.username == null)
    //     {
    //         toastService.ShowError("Vui lòng chọn user muốn cấp quyền.");
    //         return;
    //     }

    //     string[] storedProcedures = GetStoredProceduresForTable(tablePermission.TableName);
    //     foreach (var procedure in storedProcedures)
    //     {
    //         string sqlCommand = isGranted
    //             ? $"GRANT EXECUTE ON C##Admin.{procedure} TO {user.username};"
    //             : $"REVOKE EXECUTE ON C##Admin.{procedure} FROM {user.username};";

    //         await user_Service.ExecuteSqlCommand(sqlCommand);
    //     }

    //     await InvokeAsync(StateHasChanged);
    // }


    // private string[] GetStoredProceduresForTable(string tableName)
    // {
    //     if (tableName == "KHUVUCTRONG")
    //     {
    //         return new[] { "GetAllKhuVucTrong", "AddKhuVucTrong", "UpdateKhuVucTrong", "DeleteKhuVucTrong" };
    //     }
    //     else if (tableName == "KHO")
    //     {
    //         return new[] { "GetAllKho", "AddKho", "UpdateKho", "DeleteKho" };
    //     }
    //     else if (tableName == "HOTRONG")
    //     {
    //         return new[] { "GetAllHoTrong", "AddHoTrong", "UpdateHoTrong", "DeleteHoTrong" };
    //     }
    //     else if (tableName == "LOTHANHLONG")
    //     {
    //         return new[] { "GetAllLoThanhLong", "AddLoThanhLong", "UpdateLoThanhLong", "DeleteLoThanhLong" };
    //     }
    //     else
    //     {
    //         return Array.Empty<string>();
    //     }
    // }

    private async Task OnUserSelected(ChangeEventArgs e)
    {
        
    }



}
