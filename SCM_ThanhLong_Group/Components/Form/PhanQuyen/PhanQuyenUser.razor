@page "/phanquyenuser"
@using SCM_ThanhLong_Group.Model
@inject Kho_Service khoService
@inject Users_Service user_Service
@inject ChucNang_Service chucNangService
@inject IToastService toastService
@inject Users user
@inject NavigationManager NavigationManager

<style>
    /* Giao diện chung */
    body {
        font-family: Arial, sans-serif;
        /* background-color: #f5f7fa; */
        color: #333;
        margin: 0;
        background-image: url('./images/bgdep.jpg');
        background-size: cover;
        background-attachment: fixed;
        justify-content: center;
        align-items: center;
        height: 100vh;
        overflow: hidden;
    }

        body::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.1); /* Tạo hiệu ứng tối màu */
            z-index: -1;
        }

    /* Container chính */
    .container {
        
        text-align: center;
        background: #fff;
        margin-top: 20px;
        padding: 40px;
        border-radius: 10px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        width: 80%;
        max-width: 900px;
       /*  margin-top:200px; */
    }

    /* Tiêu đề */
    .title {
        font-size: 32px;
        font-weight: bold;
        color: #007bff;
        margin-bottom: 20px;
    }

    /* ComboBox */
    .telerik-combobox {
        margin-bottom: 20px;
        border: 2px solid #007bff;
        border-radius: 5px;
        padding: 10px;
        width: 100%;
        max-width: 340px;
        margin: 0 auto 20px;
        transition: box-shadow 0.2s;
    }

        .telerik-combobox:hover {
            box-shadow: 0 0 8px rgba(0, 123, 255, 0.5);
        }

    /* Bảng phân quyền */
    .table {
        width: 100%;
        border-collapse: collapse;
        background-color: #fff;
        margin-top: 20px;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

        .table thead {
            background-color: #007bff;
            color: #fff;
            text-align: left;
        }

        .table th, .table td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: center;
        }

        .table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .table tr:hover {
            background-color: #e9f5ff;
            cursor: pointer;
        }

    /* Checkbox with icons */
    input[type="checkbox"] {
        transform: scale(1.2);
        cursor: pointer;
        margin: 0;
    }

        input[type="checkbox"]:hover {
            transform: scale(1.3);
            transition: transform 0.2s ease;
        }

    /* Tooltips */
    .tooltip {
        visibility: hidden;
        position: absolute;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 5px;
        padding: 5px;
        z-index: 1;
        bottom: 100%;
        left: 50%;
        margin-left: -60px;
    }

    input[type="checkbox"]:hover + .tooltip {
        visibility: visible;
    }
</style>

<div class="container">
    <!-- Tiêu đề -->
    <h1 class="title">Phân Quyền User</h1>

    <!-- ComboBox -->
    <TelerikComboBox Data="@lstUser"
                     Value="@userGet.username"
                     Filterable="true"
                     FilterOperator="@StringFilterOperator.Contains"
                     ValueField="username"
                     TextField="username"
                     Placeholder="Chọn user"
                     Width="340px"
                     ValueChanged="@(async (string args) => await OnUserSelected(args))">
        <ComboBoxSettings>
            <ComboBoxPopupSettings Height="250px" MaxHeight="300px" MinHeight="75px" />
        </ComboBoxSettings>
    </TelerikComboBox>

    <!-- Bảng phân quyền -->
    <table class="table">
        <thead>
            <tr>
                <th>Table Name</th>
                <th>Xem</th>
                <th>Thêm</th>
                <th>Sửa</th>
                <th>Xóa</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tablePermission in lstTables)
            {
                <tr>
                    <td>@tablePermission.TableName</td>
                    <td>
                        <input type="checkbox" checked="@tablePermission.Xem"
                               @onchange="async (e) => await ViewPermission(tablePermission, (bool)((ChangeEventArgs)e).Value)" />
                        <span class="tooltip">Xem</span>
                    </td>
                    <td>
                        <input type="checkbox" checked="@tablePermission.Them"
                               @onchange="async (e) => await AddPermission(tablePermission, (bool)((ChangeEventArgs)e).Value)" />
                        <span class="tooltip">Thêm</span>
                    </td>
                    <td>
                        <input type="checkbox" checked="@tablePermission.Sua"
                               @onchange="async (e) => await UpdatePermission(tablePermission, (bool)((ChangeEventArgs)e).Value)" />
                        <span class="tooltip">Sửa</span>
                    </td>
                    <td>
                        <input type="checkbox" checked="@tablePermission.Xoa"
                               @onchange="async (e) => await DeletePermission(tablePermission, (bool)((ChangeEventArgs)e).Value)" />
                        <span class="tooltip">Xóa</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Users> lstUser = new List<Users>();
    private List<TablePermission> lstTables = new List<TablePermission>();
    Users userGet = new Users();
    private string[] permissions = { "Xem", "Them", "Sua", "Xoa" };
    private string? selectedPermission;

    private bool isUserActive;

    private string addModalClass = "";
    private string addModalDisplayStyle = "display:none";
    private string editModalClass = "";
    private string editModalDisplayStyle = "display:none";
    private string deleteModalClass = "";
    private string deleteModalDisplayStyle = "display:none";

    private string username;
    private string password;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user.username = "C##" + await user_Service.GetCurrentUserName();
            user.password = await user_Service.GetCurrentPassWord();
            lstUser = await user_Service.getAllData();
            InitializeTablePermissions();

        }
        catch (Exception ex)
        {
            // Xử lý lỗi nếu cần thiết
            NavigationManager.NavigateTo("/Error");
        }
    }


    private void InitializeTablePermissions()
    {
        lstTables = new List<TablePermission>
        {
            new TablePermission { TableName = "KHUVUCTRONG" },
            new TablePermission { TableName = "KHO" },
            new TablePermission { TableName = "HOTRONG" },
            //new TablePermission { TableName = "NHAPHANPHOI" },
            new TablePermission { TableName = "LOTHANHLONG" }
        };
    }

    private Dictionary<string, string> procedureToTableMap = new Dictionary<string, string>
    {
        { "GETALLKHUVUCTRONG", "KHUVUCTRONG" },
        { "ADDKHUVUCTRONG", "KHUVUCTRONG" },
        { "UPDATEKHUVUCTRONG", "KHUVUCTRONG" },
        { "DELETEKHUVUCTRONG", "KHUVUCTRONG" },
        { "GETALLKHO", "KHO" },
        { "ADDKHO", "KHO" },
        { "UPDATEKHO", "KHO" },
        { "DELETEKHO", "KHO" },
        { "GETALLNHAPHANPHOI", "NHAPHANPHOI" },
        { "ADDNHAPHANPHOI", "NHAPHANPHOI" },
        { "UPDATENHAPHANPHOI", "NHAPHANPHOI" },
        { "DELETENHAPHANPHOI", "NHAPHANPHOI" },
        { "GETALLHOTRONG", "HOTRONG" },
        { "ADDHOTRONG", "HOTRONG" },
        { "UPDATEHOTRONG", "HOTRONG" },
        { "DELETEHOTRONG", "HOTRONG" },
        { "GETALLLOTHANHLONG", "LOTHANHLONG" },
        { "ADDLOTHANHLONG", "LOTHANHLONG" },
        { "UPDATELOTHANHLONG", "LOTHANHLONG" },
        { "DELETELOTHANHLONG", "LOTHANHLONG" }
    };

    private async Task LoadUserPermissions()
    {
        if (userGet.username != null)
        {
            var userPermissions = await user_Service.GetUserPermissions(userGet.username);
            foreach (var tablePermission in lstTables)
            {
                foreach (var userPermission in userPermissions)
                {
                    if (procedureToTableMap.TryGetValue(userPermission.TableName, out string tableName) && tableName == tablePermission.TableName)
                    {
                        if (userPermission.TableName.StartsWith(""))
                        {
                            tablePermission.Xem = true;
                        }
                        else if (userPermission.TableName.StartsWith("ADD"))
                        {
                            tablePermission.Them = true;
                        }
                        else if (userPermission.TableName.StartsWith("UPDATE"))
                        {
                            tablePermission.Sua = true;
                        }
                        else if (userPermission.TableName.StartsWith("DELETE"))
                        {
                            tablePermission.Xoa = true;
                        }
                    }
                }
            }
            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task ViewPermission(TablePermission tablePermission, bool isGranted)
    {
        string sql = "";
        if (userGet.username == null)
        {
            toastService.ShowError("Vui lòng chọn user muốn cấp quyền.");
            return;
        }

        if (tablePermission.TableName == "KHUVUCTRONG")
        {
            // isGranted is used to store the state of the checkbox. If checked, isGranted = true; otherwise, isGranted = false
            sql = isGranted ?
                "GRANT EXECUTE ON C##Admin.GetAllKhuVucTrong TO " + userGet.username :
                "REVOKE EXECUTE ON C##Admin.GetAllKhuVucTrong FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "NHAPHANPHOI")
        {
            sql = isGranted ?
             "GRANT EXECUTE ON C##Admin.GetAllNhaPhanPhoi TO " + userGet.username :
             "REVOKE EXECUTE ON C##Admin.GetAllNhaPhanPhoi FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "KHO")
        {
            sql = isGranted ?
             "GRANT EXECUTE ON C##Admin.GETALLKHO TO " + userGet.username :
             "REVOKE EXECUTE ON C##Admin.GETALLKHO FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "HOTRONG")
        {
            sql = isGranted ?
             "GRANT EXECUTE ON C##Admin.GETALLHOTRONG TO " + userGet.username :
             "REVOKE EXECUTE ON C##Admin.GETALLHOTRONG FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "LOTHANHLONG")
        {
            sql = isGranted ?
             "GRANT EXECUTE ON C##Admin.GETALLLOTHANHLONG TO " + userGet.username :
             "REVOKE EXECUTE ON C##Admin.GETALLLOTHANHLONG FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddPermission(TablePermission tablePermission, bool isGranted)
    {
        string sql = "";
        if (userGet.username == null)
        {
            toastService.ShowError("Vui lòng chọn user muốn cấp quyền.");
            return;
        }

        if (tablePermission.TableName == "KHUVUCTRONG")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.ADDKhuVucTrong TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.ADDKhuVucTrong FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "KHO")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.ADDKHO TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.ADDKHO FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if(tablePermission.TableName=="NHAPHANPHOI")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.AddNhaPhanPhoi TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.AddNhaPhanPhoi FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "HOTRONG")
        {
            sql = isGranted ?
             "GRANT EXECUTE ON C##Admin.ADDHOTRONG TO " + userGet.username :
             "REVOKE EXECUTE ON C##Admin.ADDHOTRONG FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "LOTHANHLONG")
        {
            sql = isGranted ?
             "GRANT EXECUTE ON C##Admin.AddLoThanhLong TO " + userGet.username :
             "REVOKE EXECUTE ON C##Admin.AddLoThanhLong FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        await InvokeAsync(StateHasChanged);

    }

    private async Task UpdatePermission(TablePermission tablePermission, bool isGranted)
    {
        string sql = "";
        if (userGet.username == null)
        {
            toastService.ShowError("Vui lòng chọn user muốn cấp quyền.");
            return;
        }

        if (tablePermission.TableName == "KHUVUCTRONG")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.UpdateKhuVucTrong TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.UpdateKhuVucTrong FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "KHO")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.UPDATEKHO TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.UPDATEKHO FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "NHAPHANPHOI")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.UpdateNhaPhanPhoi TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.UpdateNhaPhanPhoi FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "HOTRONG")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.UpdateHoTrong TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.UpdateHoTrong FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "LOTHANHLONG")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.UpdateLoThanhLong TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.UpdateLoThanhLong FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeletePermission(TablePermission tablePermission, bool isGranted)
    {
        string sql = "";
        if (userGet.username == null)
        {
            toastService.ShowError("Vui lòng chọn user muốn cấp quyền.");
            return;
        }

        if (tablePermission.TableName == "KHUVUCTRONG")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.DeleteKhuVucTrong TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.DeleteKhuVucTrong FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "KHO")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.DELETEKHO TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.DELETEKHO FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "NHAPHANPHOI")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.DeleteNhaPhanPhoi TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.DeleteNhaPhanPhoi FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "HOTRONG")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.DELETEHOTRONG TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.DELETEHOTRONG FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        if (tablePermission.TableName == "LOTHANHLONG")
        {
            sql = isGranted ?
              "GRANT EXECUTE ON C##Admin.DeleteLoThanhLong TO " + userGet.username :
              "REVOKE EXECUTE ON C##Admin.DeleteLoThanhLong FROM " + userGet.username;
            await user_Service.ExecuteSqlCommand(sql);
        }
        await InvokeAsync(StateHasChanged);
    }
    

    private async Task OnUserSelected(string args)
    {
        if (args != null && lstUser != null)
        {
            userGet.username = lstUser.FirstOrDefault(u => u.username == args.ToString())?.username;
            if (user.username != null)
            {
                await InvokeAsync(StateHasChanged);
            }
        }
        await LoadUserPermissions();
    }




}
