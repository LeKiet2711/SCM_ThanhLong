@page "/capnhatprofile"
@rendermode InteractiveServer
@inject Profile_Service profileSerVice
@inject NavigationManager nav

@*Thư viện gọi alert*@
@inject IJSRuntime JsRuntime

@*Thư viện biểu thức chính quy*@
@using System.Text.RegularExpressions
@inject Users user

<PageTitle>Cập nhật profile</PageTitle>
<span class="chu-dep">Cập nhật profile</span>


<label for="">Tên profile</label>
<span>@profileName</span>
<br />

@foreach (ProfileInformation profileAttribute in lstProfileInformation) {
    <label for="@profileAttribute.RESOURCE_NAME">@profileAttribute.RESOURCE_NAME</label>
    <input type="number" id="@profileAttribute.RESOURCE_NAME" min="1" @bind="@profileAttribute.LIMIT">
    <br/>
}

<select @bind="profileName">
    @foreach (string pro in profiles)
    {
        <option>@pro</option>
    }
</select>

@* <label for="profile-type">Thuộc tính profile</label> *@
@* <select class="khanhbang" id="profile-type" @bind="profileAttribute"> *@
@*     <option value="CPU_PER_SESSION" selected>CPU_PER_SESSION</option> *@
@*     <option value="SESSIONS_PER_USER">SESSIONS_PER_USER</option> *@
@*     <option value="CONNECT_TIME">CONNECT_TIME</option> *@
@*     <option value="IDLE_TIME">IDLE_TIME</option> *@
@*     <option value="LOGICAL_READS_PER_SESSION">LOGICAL_READS_PER_SESSION</option> *@
@*     <option value="PRIVATE_SGA">PRIVATE_SGA</option> *@
@*     <option value="CPU_PER_CALL">CPU_PER_CALL</option> *@
@*     <option value="LOGICAL_READS_PER_CALL">LOGICAL_READS_PER_CALL</option> *@
@*     <option value="FAILED_LOGIN_ATTEMPTS">FAILED_LOGIN_ATTEMPTS</option> *@
@*     <option value="PASSWORD_LOCK_TIME">PASSWORD_LOCK_TIME</option> *@
@*     <option value="PASSWORD_LIFE_TIME">PASSWORD_LIFE_TIME</option> *@
@*     <option value="PASSWORD_GRACE_TIME">PASSWORD_GRACE_TIME</option> *@
@*     <option value="PASSWORD_REUSE_TIME">PASSWORD_REUSE_TIME</option> *@
@*     <option value="PASSWORD_VERIFY_FUNCTION">PASSWORD_VERIFY_FUNCTION</option> *@
@* </select> *@

@* <label class="khanhbang" for="limit">Vui lòng nhập số giới hạn</label> *@
@* <input class="input-dep" id="limit" type="number" min="1" @bind="value" /> *@

@* <button class="nut-dep" @onclick="addAProfileAttribute" >Thêm vào danh mục profile</button> *@



<button class="nut-dep" @onclick="updateProfile">
    Cập nhật
</button>

@code {
    private List<string> profiles = new List<string>();
    private string profileName { get; set; }
    private string profileAttribute { get; set; }

    private string thuocTinhProfile = "";
    private string value = "";


    //Danh sách thuộc tính profile cần cập nhật
    List<ProfileInformation> lstProfileInformation = new List<ProfileInformation>();


    protected override async Task OnInitializedAsync()
    {
        user.username = "sys";
        user.password = "sys";

        profiles = await profileSerVice.getAllProfileName();

        //Lấy tên profile được truyền vào từ form bên kia
        var uri = new Uri(nav.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("data", out var encodedData))
        {
            profileName = Uri.UnescapeDataString(encodedData);
        }
        lstProfileInformation = await profileSerVice.GetProfileInformation(profileName);

       
    }

    private async void addAProfileAttribute()
    {
        string profileAttribute = this.profileAttribute;
        string value = this.value;
        if (!string.IsNullOrEmpty(value) && !string.IsNullOrEmpty(profileAttribute))
        {
            if (thuocTinhProfile.Contains(profileAttribute))
            {
                int index = thuocTinhProfile.IndexOf(profileAttribute) + 1;
                if (index != -1)
                {
                    string pattern = @"(" + profileAttribute + @"\s+)\d+";
                    thuocTinhProfile = Regex.Replace(thuocTinhProfile, pattern, $"${{1}}{value}");
                    // thuocTinhProfileHienThi = Regex.Replace(thuocTinhProfile, pattern, $"${{1}}{value}");
                }
            }
            else
            {
                thuocTinhProfile += profileAttribute + " " + value + " ";
                // thuocTinhProfileHienThi += profileAttribute + " " + value + "\n\t ";
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Vui lòng nhập hạn mức profile!");
        }
    }

    private async void updateProfile()
    {
        foreach (ProfileInformation profileAttribute in lstProfileInformation)
        {
            thuocTinhProfile += " " + profileAttribute.RESOURCE_NAME + " " + profileAttribute.LIMIT + " ";
        }
        if (!String.IsNullOrEmpty(thuocTinhProfile))
        {
            // if (thuocTinhProfile.Contains(profileAttribute))
            // {
            //     int index = thuocTinhProfile.IndexOf(profileAttribute) + 1;
            //     if (index != -1)
            //     {
            //         string pattern = @"(" + profileAttribute + @"\s+)\d+";
            //         thuocTinhProfile = Regex.Replace(thuocTinhProfile, pattern, $"${{1}}{value}");
            //         thuocTinhProfileHienThi = Regex.Replace(thuocTinhProfile, pattern, $"${{1}}{value}");
            //     }
           
            if (await profileSerVice.UpdateProfile(profileName, thuocTinhProfile))
                {
                    // khanhBang += "thành công!";
                    nav.NavigateTo("quanlyprofile");
                }
                else
                {
                    // khanhBang += "thất công!";
                }
            // }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Vui lòng nhập đầy đủ thông tin hợp lệ cho profile!");
        }
    }
}