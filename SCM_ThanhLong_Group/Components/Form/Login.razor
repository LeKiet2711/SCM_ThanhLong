@page "/"
@using SCM_ThanhLong_Group.Components.Layout
@layout LoginLayout
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IToastService ToastService
@inject Users_Service Users_Service
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject Profile_Service profileService
@inject Users_Service userService


<link href="mahacss/styledangnhap.css" rel="stylesheet" />
@* <link href="css/login.css" rel="stylesheet" /> *@


<PageTitle>Login</PageTitle>

<div class="moi"></div>

<div class="giua dangky">
 <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
      @* <div class="dangnhapcontainer"> *@
        <div class="trentrai"></div>
        @* <h1>Đăng nhập</h1> *@
        <span style="font-size: 40px; font-weight: bold; display: block; text-align: center; width: 100%;">
            Đăng
            nhập
        </span>
        @* <div class="container-input"> *@
             <InputText @bind-Value="loginModel.username" class="textbox custom-input" placeholder="Tên đăng nhập"></InputText>
            @* <input  @bind="loginModel.username" class="textbox custom-input" type="text" placeholder="Tên đăng nhập"> *@
            <i class="fa-solid fa-user"></i>
           <ValidationMessage For="@(() =>loginModel.username)" class="validate-kb"/>
        @* </div> *@
        @* <div class="container-input"> *@
            <InputText @bind-Value="loginModel.password" class="textbox custom-input" type="password" placeholder="Mật khẩu"></InputText>
            <i class="fa-solid fa-lock"></i>
        <ValidationMessage For="@(()=>loginModel.password)" class="validate-kb" />
        @* </div> *@
        <button type="submit" class="nut-dang-nhap ">Đăng nhập</button>
        <div class="text-dang-ky-thanh-vien">
            <a href="Register">Đăng kí thành viên</a>
        </div>

        <div class="duoiphai"></div>
</EditForm> 




   @*  <div class="trentrai"></div>
    <span style="font-size: 40px; font-weight: bold; display: block; text-align: center; width: 100%;">
        Đăng
        nhập

    </span>
    <h2 style="text-align: center;">Xin Chào!</h2>
    <input class="textbox custom-input" type="text" placeholder="Vui lòng nhập tên ..."> *@
    <div class="duoiphai"></div>

</div>

<div class="moi giua"></div>
<div class="moi trai"></div>

<div class="thanhlong"></div>
<div class="thanhlong2"></div>


<img class="nho" src="./img/decor-7-DjmEjkAr.png" alt="">
<img class="nho giuan" src="./img/decor-7-DjmEjkAr.png" alt="">

<img class="kich-thuoc" src="./img/duoi.png" alt="">


@code {
    private Users loginModel = new Users();
    private bool isInitialized = false;

    private async Task HandleLogin()
    {
        var result = await userService.AuthenticateUser(loginModel.username.ToUpper(), loginModel.password.ToUpper());

        if (result)
        {
            Users_Service.currentUserName = loginModel.username;
            Users_Service.currentPassWord = loginModel.password;
            // ToastService.ShowSuccess("Đăng nhập thành công!");
            Navigation.NavigateTo("/validate-key");
        }
        else
        {
            if ((await userService.isTheUserLocked("C##"+ (loginModel.username.ToUpper())) ))
            {
                ToastService.ShowError("Tài khoản này hiện đang bị khóa! vui lòng liên hệ quản trị viên để cấp lại!");
            }
            else
            {
                ToastService.ShowError("Sai thông tin tài khoản hoặc mật khẩu!");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            var currentUserName = await Users_Service.GetCurrentUserName();
            var currentPassWord = await Users_Service.GetCurrentPassWord();
            if (!string.IsNullOrEmpty(currentUserName))
            {
                Navigation.NavigateTo("/");
            }
            isInitialized = true;
        }
    }
}
