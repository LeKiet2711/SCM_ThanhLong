@page "/phieuxuatkho"
@rendermode InteractiveServer
@inject PhieuXuat_Service PhieuXuat_Service
@inject ChiTietPhieuXuat_Service ChiTietPhieuXuat_Service
@inject NavigationManager Navigation
@inject IToastService ToastService
@inject Users_Service Users_Service
@inject Users user
@inject IJSRuntime JSRuntime

<link href="css/form.css" rel="stylesheet" />
<span class="chu-dep" style="text-align:center;font-weight:bold">Phiếu xuất kho</span>

<TelerikComboBox Data="@khoList"
                 Value="@khoId"
                 Filterable="true"
                 FilterOperator="@StringFilterOperator.Contains"
                 ValueField="Auto_ID"
                 TextField="TenKho"
                 Placeholder="Chọn kho"
                 Width="340px"
                 ValueChanged="@(async (int args) => await ValueChanged(args))">
    <ComboBoxSettings>
        <ComboBoxPopupSettings Height="250px" MaxHeight="300px" MinHeight="75px" />
    </ComboBoxSettings>
</TelerikComboBox>

<button class="nut-dep" @onclick="OpenAddModal" style="margin-bottom:10px; position: relative;">
    <span class="oi oi-plus" aria-hidden="true">Thêm phiếu xuất mới</span>
</button>

@if (dataList == null)
{
    <p><em>Loading......</em></p>
}
else
{
     <TelerikGrid Data="@dataList" Pageable="true" Sortable="true" Height="calc(100vh - 170px)" Resizable="true" Reorderable="true" Class="telerik-grid"> 
         <GridColumns> 
             <GridColumn Field="@nameof(PhieuXuat.SoPhieuXuat)" Title="Số phiếu xuất" Width="100px" /> 
             <GridColumn Field="@nameof(PhieuXuat.TenKho)" Title="Tên kho" Width="100px" /> 
             <GridColumn Field="@nameof(PhieuXuat.NgayXuat)" Title="Ngày xuất" Width="100px" /> 
             <GridColumn Title="Trạng thái" Width="150px">
                 <Template>
                    @{
                        var phieuXuat = (PhieuXuat)context;
                        string buttonClass = phieuXuat.TrangThai == 1 ? "btn btn-success" : "btn btn-warning";
                        string buttonText = phieuXuat.TrangThai == 1 ? "Đã xử lý" : "Chưa được xử lý";
                    }
                    <button class="@buttonClass" disabled style="cursor: not-allowed; opacity: 0.65;">@buttonText</button>
                </Template>
            </GridColumn>
             <GridCommandColumn Width="180px"> 
                 <GridCommandButton Command="Edit" OnClick="@EditItem"> 
                     <span class="oi oi-pencil" Width="100px"></span> Sửa 
                 </GridCommandButton> 
                 <GridCommandButton Command="Delete" OnClick="@DeleteItem"> 
                     <span class="oi oi-trash" Width="100px"></span> Xóa 
                 </GridCommandButton> 
                 <GridCommandButton OnClick="() => ViewDetails((context as PhieuXuat).Auto_ID)"> 
                     <span class="oi oi-eye" Width="100px"></span> Xem chi tiết phiếu xuất 
                 </GridCommandButton> 
                 <GridCommandButton OnClick="() => ExportReport((context as PhieuXuat).Auto_ID.ToString())"> 
                     <span class="oi oi-trash" Width="100px"></span> In phiếu xuất 
                 </GridCommandButton> 
             </GridCommandColumn> 
         </GridColumns> 
     </TelerikGrid> 
}

<div class="modal fade @addModalClass" tabindex="-1" role="dialog" style="@addModalDisplayStyle">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:#dedcd8">
                <h5 class="modal-title"><b>Thêm mới phiếu xuất</b></h5>
                <button type="button" class="close" @onclick="CloseAddModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown">
                <EditForm Model="@phieuXuat" OnValidSubmit="createPhieuXuat">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="SoPhieuXuat" class="control-label"><b>Số phiếu xuất: </b></label>
                        <InputText class="form-control" @bind-Value=@phieuXuat.SoPhieuXuat />
                        <ValidationMessage For="@(() => phieuXuat.SoPhieuXuat)" />
                    </div>
                    <div class="form-group">
                        <label for="NgayXuatKho" class="control-label"><b>Ngày xuất kho: </b></label>
                        <InputDate class="form-control" @bind-Value="@phieuXuat.NgayXuat" format="dd/MM/yyyy" />
                        <ValidationMessage For="@(()=>phieuXuat.NgayXuat)" />
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Thêm phiếu xuất</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">Đóng</button>
                    </div>

                    <a class="btn btn-secondary" @onclick="OpenAddChiTietModal" style="margin-top:5px">Thêm</a>
                    <table class="table table-bordered">
                        <tr>
                            <th>Mã lô hàng</th>
                            <th>Số lượng xuất</th>
                            <th>Đơn giá</th>
                            <th>Thành tiền</th>
                            <th>Xóa</th>
                        </tr>
                        @foreach (ChiTietPhieuXuat ct in lstCTPX)
                        {
                            <tr>
                                <th>@ct.MaLoSTR</th>
                                <th>@ct.SoKg</th>
                                <th>@ct.DonGia</th>
                                <th>@(ct.SoKg * ct.DonGia)</th>
                                <th>
                                    <button type="button" class="btn btn-danger" style="color:black" @onclick="() => RemoveChiTiet(ct)">Xóa</button>
                                </th>
                            </tr>
                        }
                    </table>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @editModalClass" tabindex="-1" role="dialog" style="@editModalDisplayStyle">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:#dedcd8">
                <h5 class="modal-title"><b>Sửa phiếu xuất</b></h5>
                <button type="button" class="close" @onclick="CloseEditModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown">
                <EditForm Model="@phieuXuat" OnValidSubmit="updatePhieuXuat">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="SoPhieuXuat" class="control-label"><b>Số phiếu xuất: </b></label>
                        <InputText class="form-control" @bind-Value=@phieuXuat.SoPhieuXuat />
                        <ValidationMessage For="@(() => phieuXuat.SoPhieuXuat)" />
                    </div>
                    <div class="form-group">
                        <label for="NgayXuatKho" class="control-label"><b>Ngày xuất kho: </b></label>
                        <InputDate class="form-control" @bind-Value="@phieuXuat.NgayXuat" format="dd/MM/yyyy" />
                        <ValidationMessage For="@(()=>phieuXuat.NgayXuat)" />
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Sửa phiếu nhập</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">Đóng</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @deleteModalClass" tabindex="-1" role="dialog" style="@deleteModalDisplayStyle">
    <div class="modal-dialog model-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:beige">
                <h5 class="modal-title"><b>Xóa phiếu xuất</b></h5>
                <button type="button" class="close" @onclick="CloseDeleteModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown; font-size:30px">
                <p style="color:red">Bạn có chắc chắn muốn xóa phiếu xuất này không?</p>
                <EditForm Model="@phieuXuat" OnValidSubmit="deletePhieuXuat">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="SoPhieuXuat" class="control-label">Số phiếu xuất: </label>
                        <label><b>@phieuXuat.SoPhieuXuat</b></label>
                    </div>
                    <div class="form-group">
                        <label for="TenKho" class="control-label">Tên kho: </label>
                        <label><b>@phieuXuat.TenKho</b></label>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Xóa phiếu xuất</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Đóng</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @addChiTietModalClass" tabindex="-1" role="dialog" style="@addChiTietModalDisplayStyle">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:#dedcd8">
                <h5 class="modal-title"><b>Thêm chi tiết phiếu xuất</b></h5>
                <button type="button" class="close" @onclick="CloseAddChiTietModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <p style="color:red;">Quy chuẩn nhập: Đơn giá = 40 => 40000 VND, Số Kg = 500 => 500kg</p>
                </div>
                <div class="form-group">
                    <InputSelect class="form-control" @bind-Value="@newChiTiet.MaLo">
                        <option value="">-- Chọn lô thanh long --</option>
                        @foreach (var item in loThanhLongList)
                        {
                            <option value="@item.Auto_ID">@item.MaLo</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="SoLuong">Số Kg xuất:</label>
                    <InputNumber class="form-control" @bind-Value="newChiTiet.SoKg" />
                </div>
                <div class="form-group">
                    <label for="DonGia">Đơn giá:</label>
                    <InputNumber class="form-control" @bind-Value="newChiTiet.DonGia" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddChiTiet">Thêm</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddChiTietModal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    private List<PhieuXuat> dataList = new List<PhieuXuat>();
    private List<PhieuXuat> dataListException = new List<PhieuXuat>();
    private List<HoTrong> hoTrongList = new List<HoTrong>();
    private List<LoThanhLong> loThanhLongList = new List<LoThanhLong>();
    private List<Kho> khoList = new List<Kho>();
    private int khoId;

    public List<ChiTietPhieuXuat> lstCTPX = new List<ChiTietPhieuXuat>();

    private PhieuXuat phieuXuat = new PhieuXuat();
    private ChiTietPhieuXuat newChiTiet = new ChiTietPhieuXuat();

    private string addModalClass = "";
    private string addModalDisplayStyle = "display:none";
    private string editModalClass = "";
    private string editModalDisplayStyle = "display:none";
    private string deleteModalClass = "";
    private string deleteModalDisplayStyle = "display:none";
    private string addChiTietModalClass = "";
    private string addChiTietModalDisplayStyle = "display:none";

    private string soPhieuXuat;
    private string username;
    private string password;

    private bool IsAdmin => user.username == "C##ADMIN";

    protected override async Task OnInitializedAsync()
    {
        try{
            user.username = "C##" + await Users_Service.GetCurrentUserName();
            user.password = await Users_Service.GetCurrentPassWord();
            await Users_Service.GrantPermissionXuat(user.username);
            hoTrongList = await PhieuXuat_Service.getHoTrongData();
            khoList = await PhieuXuat_Service.getKhoData();
            loThanhLongList = await PhieuXuat_Service.getLoThanhLongData();
            await LoadSessionByUser();
        }
        catch
        {
            Navigation.NavigateTo("/Error");
        }
    }

    private async Task ValueChanged(int args)
    {
        khoId = args;
        phieuXuat.KhoID = khoId;
        await LoadData(khoId);
    }

    private async Task LoadData(int maKho)
    {
        dataListException= await PhieuXuat_Service.getAllPhieuXuatForException();
        dataList = await PhieuXuat_Service.getAllData(maKho,user.username);
    }

    private void OpenAddModal()
    {
        if(khoId == 0)
        {
            ToastService.ShowError("Vui lòng chọn kho trước khi thêm phiếu xuất!");
            return;
        }
        phieuXuat = new PhieuXuat();
        addModalClass = "show";
        addModalDisplayStyle = "display:block";
    }

    private void CloseAddModal()
    {
        addModalClass = "";
        addModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void OpenEditModal(PhieuXuat item)
    {
        phieuXuat = item.Shallowcopy();
        soPhieuXuat = item.SoPhieuXuat;

        editModalClass = "show";
        editModalDisplayStyle = "display:block";
    }

    private void CloseEditModal()
    {
        editModalClass = "";
        editModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void OpenDeleteModal(PhieuXuat item)
    {
        phieuXuat = item;
        deleteModalClass = "show";
        deleteModalDisplayStyle = "display:block";
    }

    private void CloseDeleteModal()
    {
        deleteModalClass = "";
        deleteModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void OpenAddChiTietModal()
    {
        newChiTiet = new ChiTietPhieuXuat(); 
        addChiTietModalClass = "show";
        addChiTietModalDisplayStyle = "display:block";
    }

    private void CloseAddChiTietModal()
    {
        addChiTietModalClass = "";
        addChiTietModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void AddChiTiet()
    {
        if (newChiTiet.MaLo == 0 || newChiTiet.SoKg == 0 || newChiTiet.DonGia == 0)
        {
            ToastService.ShowError("Vui lòng nhập đầy đủ thông tin của chi tiết phiếu xuất!");
            return;
        }
        if (newChiTiet.SoKg < 0 || newChiTiet.DonGia < 0)
        {
            ToastService.ShowError("Số Kg xuất và đơn giá phải lớn hơn 0");
            return;
        }
        var loThanhLong = loThanhLongList.FirstOrDefault(l => l.Auto_ID == newChiTiet.MaLo);
        newChiTiet.MaLoSTR = loThanhLong?.MaLo ?? "Không xác định";
        lstCTPX.Add(newChiTiet);
        CloseAddChiTietModal();
    }

    private void RemoveChiTiet(ChiTietPhieuXuat chitiet)
    {
        lstCTPX.Remove(chitiet);
        StateHasChanged();
    }


    protected async Task createPhieuXuat()
    {
        if (await PhieuXuat_Service.isSoPhieuXuatExist(phieuXuat, dataListException, "ORACLE"))
        {
            ToastService.ShowError("Mã phiếu xuất đã tồn tại!");
        }
        else
        {
            try
            {
                if(lstCTPX.Count == 0)
                {
                    ToastService.ShowError("Vui lòng thêm chi tiết phiếu xuất!");
                    return;
                }

                phieuXuat.KhoID = khoId;
                int autoID = await PhieuXuat_Service.addData(phieuXuat);
                phieuXuat.Auto_ID = autoID;

                foreach (ChiTietPhieuXuat ctpx in lstCTPX)
                {
                    ctpx.SoPhieuXuat = phieuXuat.Auto_ID;
                    await ChiTietPhieuXuat_Service.addData(ctpx);
                }
                dataList = await PhieuXuat_Service.getAllData(khoId,user.username);
                CloseAddModal();
                ToastService.ShowSuccess("Thêm phiếu xuất thành công!");
                StateHasChanged();
            }
            catch (Exception e)
            {
                //throw e;
                ToastService.ShowError("Có lỗi xảy ra!");
            }
        }
    }

    protected async Task updatePhieuXuat()
    {
        if (await PhieuXuat_Service.isSoPhieuXuatExist(phieuXuat, dataListException, soPhieuXuat))
        {
            ToastService.ShowError("Số phiếu xuất đã tồn tại!");
        }
        else
        {
            try
            {
                phieuXuat.KhoID = khoId;
                await PhieuXuat_Service.updateData(phieuXuat);
                dataList = await PhieuXuat_Service.getAllData(khoId,user.username);
                CloseEditModal();
                ToastService.ShowSuccess("Sửa phiếu xuất thành công!");
                StateHasChanged();
            }
            catch (Exception e)
            {
                //throw e;
                ToastService.ShowError("Có lỗi xảy ra!");
            }
        }
    }

    protected async Task deletePhieuXuat()
    {
        try
        {
            await PhieuXuat_Service.deleteData(phieuXuat.Auto_ID);
            await ChiTietPhieuXuat_Service.deleteData(phieuXuat.Auto_ID);
            dataList = await PhieuXuat_Service.getAllData(khoId,user.username);
            CloseDeleteModal();
            ToastService.ShowSuccess("Xóa phiếu xuất thành công!");
            StateHasChanged();
        }
        catch (Exception e)
        {
            //throw e;
            ToastService.ShowError("Có lỗi xảy ra!");
        }
    }
    
    private void EditItem(GridCommandEventArgs args)
    {
        var item = (PhieuXuat)args.Item;
        if (item.TrangThai == 0 || (item.TrangThai == 1 && IsAdmin))
        {
            OpenEditModal(item);
        }
        else
        {
            ToastService.ShowError("Phiếu xuất đã được xử lý vui lòng liên hệ admin để biết thêm!");
        }
    }

    private void DeleteItem(GridCommandEventArgs args)
    {
        var item = (PhieuXuat)args.Item;
        if (item.TrangThai == 0 || (item.TrangThai == 1 && IsAdmin))
        {
            OpenDeleteModal(item);
        }
        else
        {
            ToastService.ShowError("Phiếu xuất đã được xử lý vui lòng liên hệ admin để biết thêm!");
        }
    }

    private void ViewDetails(int Auto_ID)
    {
        var phieuXuat = dataList.FirstOrDefault(p => p.Auto_ID == Auto_ID);
        if (phieuXuat != null && phieuXuat.TrangThai == 1)
        {
            ToastService.ShowError("Phiếu xuất đã được xử lý, không thể xem chi tiết!");
            return;
        }
        Navigation.NavigateTo($"/chitietphieuxuat/{Auto_ID}");
    }


    private async Task ExportReport(string Auto_ID)
    {
        var phieuXuat = dataList.FirstOrDefault(p => p.Auto_ID.ToString() == Auto_ID);
        if (phieuXuat != null && phieuXuat.TrangThai == 1)
        {
            Navigation.NavigateTo($"/reportxuatkho/{Auto_ID}");
            return;
        }
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc chắn xác nhận đã xử lý phiếu xuất không?" });
        if (isConfirmed)
        {
            await UpdatePhieuXuatStatus(Auto_ID);
            Navigation.NavigateTo($"/reportxuatkho/{Auto_ID}");
        }
    }

    private async Task UpdatePhieuXuatStatus(string Auto_ID)
    {
        try
        {
            await PhieuXuat_Service.updateTrangThai(Auto_ID, 1);
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    private async Task LoadSessionByUser()
    {
        if (user.username == "C##ADMIN")
        {
            await Users_Service.LoadSessionUser();
        }
        else
        {
            await Users_Service.LoadSession();
        }
    }
}
