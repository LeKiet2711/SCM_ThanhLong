@page "/phieunhapkho"
@rendermode InteractiveServer
@inject PhieuNhap_Service PhieuNhap_Service
@inject ChiTietPhieuNhap_Service ChiTietPhieuNhap_Service
@inject NavigationManager Navigation
@inject IToastService ToastService
@inject Users_Service Users_Service
@inject Users user

<style>
    .modal {
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>

<h2 style="text-align:center;font-weight:bold">Phiếu nhập kho</h2>
<button class="btn btn-success" @onclick="OpenAddModal" style="margin-bottom:10px">
    <span class="oi oi-plus" aria-hidden="true">Thêm phiếu nhập mới</span>
</button>

@if (dataList == null)
{
    <p><em>Loading......</em></p>
}
else
{
    <TelerikGrid Data="@dataList" Pageable="true" Sortable="true" Height="calc(100vh - 170px)" Resizable="true" Reorderable="true" Class="telerik-grid">
        <GridColumns>
            <GridColumn Field="@nameof(PhieuNhap.SoPhieuNhap)" Title="Số phiếu nhập" Width="100px" />
            <GridColumn Field="@nameof(PhieuNhap.TenKho)" Title="Tên kho" Width="100px" />
            <GridColumn Field="@nameof(PhieuNhap.NgayNhap)" Title="Ngày nhập" Width="100px" />
            <GridCommandColumn Width="180px">
                <GridCommandButton Command="Edit" OnClick="@EditItem">
                    <span class="oi oi-pencil" Width="100px"></span> Sửa
                </GridCommandButton>
                <GridCommandButton Command="Delete" OnClick="@DeleteItem">
                    <span class="oi oi-trash" Width="100px"></span> Xóa
                </GridCommandButton>
                <GridCommandButton OnClick="() => ViewDetails((context as PhieuNhap).Auto_ID)">
                    <span class="oi oi-eye" Width="100px"></span> Xem chi tiết phiếu nhập
                </GridCommandButton>
                <GridCommandButton OnClick="() => ExportReport((context as PhieuNhap).Auto_ID.ToString())">
                    <span class="oi oi-trash" Width="100px"></span> In phiếu nhập
                </GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
}


<div class="modal fade @addModalClass" tabindex="-1" role="dialog" style="@addModalDisplayStyle">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:#dedcd8">
                <h5 class="modal-title"><b>Thêm mới phiếu nhập</b></h5>
                <button type="button" class="close" @onclick="CloseAddModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown">
                <EditForm Model="@phieuNhap" OnValidSubmit="createPhieuNhap">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="SoPhieuNhap" class="control-label"><b>Số phiếu nhập: </b></label>
                        <InputText class="form-control" @bind-Value=@phieuNhap.SoPhieuNhap />
                        <ValidationMessage For="@(() => phieuNhap.SoPhieuNhap)" />
                    </div>

                    @* Sẽ bỏ combobox mã kho và lấy mã kho mặc định từ kho phân quyền được chọn*@

                    <div class="form-group">
                        <label for="MaKho" class="control-label"><b>Mã kho: </b></label>
                        <InputSelect class="form-control" @bind-Value="@phieuNhap.KhoID">
                            <option value="">-- Chọn kho --</option>
                            @foreach (var item in khoList)
                            {
                                <option value="@item.Auto_ID">@item.MaKho - @item.TenKho</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(()=>phieuNhap.KhoID)" />

                    </div>
                    <div class="form-group">
                        <label for="NgayNhapKho" class="control-label"><b>Ngày nhập kho: </b></label>
                        <InputDate class="form-control" @bind-Value="@phieuNhap.NgayNhap" format="dd/MM/yyyy" />
                        <ValidationMessage For="@(()=>phieuNhap.NgayNhap)" />
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Thêm phiếu nhập</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">Đóng</button>
                    </div>
                    
                   <a class="btn btn-secondary" @onclick="OpenAddChiTietModal" style="margin-top:5px">Thêm</a>
                    <table class="table table-bordered">
                        <tr>
                            <th>Mã lô hàng</th>
                            <th>Số lượng nhập</th>
                            <th>Đơn giá</th>
                            <th>Thành tiền</th>
                            <th>Xóa</th>
                        </tr>
                        @foreach (ChiTietPhieuNhap ct in lstCTPN)
                        {
                            <tr>
                                <th>@ct.MaLoSTR</th>
                                <th>@ct.SoKg</th>
                                <th>@ct.DonGia</th>
                                <th>@(ct.SoKg* ct.DonGia)</th>
                                <th>
                                    <button type="button" class="btn btn-danger" style="color:black" @onclick="() => RemoveChiTiet(ct)">Xóa</button>
                                </th>
                            </tr>
                        }
                    </table>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @editModalClass" tabindex="-1" role="dialog" style="@editModalDisplayStyle">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:#dedcd8">
                <h5 class="modal-title"><b>Sửa phiếu nhập</b></h5>
                <button type="button" class="close" @onclick="CloseEditModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown">
                <EditForm Model="@phieuNhap" OnValidSubmit="updatePhieuNhap">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="SoPhieuNhap" class="control-label"><b>Số phiếu nhập: </b></label>
                        <InputText class="form-control" @bind-Value=@phieuNhap.SoPhieuNhap />
                        <ValidationMessage For="@(() => phieuNhap.SoPhieuNhap)" />
                    </div>
                    <div class="form-group">
                        <label for="MaKho" class="control-label"><b>Mã kho: </b></label>
                        <InputSelect class="form-control" @bind-Value="@phieuNhap.KhoID">
                            <option value="">-- Chọn kho --</option>
                            @foreach (var item in khoList)
                            {
                                <option value="@item.Auto_ID">@item.MaKho - @item.TenKho</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(()=>phieuNhap.KhoID)" />

                    </div>
                    <div class="form-group">
                        <label for="NgayNhapKho" class="control-label"><b>Ngày nhập kho: </b></label>
                        <InputDate class="form-control" @bind-Value="@phieuNhap.NgayNhap" format="dd/MM/yyyy" />
                        <ValidationMessage For="@(()=>phieuNhap.NgayNhap)" />
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Sửa phiếu nhập</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">Đóng</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


<div class="modal fade @deleteModalClass" tabindex="-1" role="dialog" style="@deleteModalDisplayStyle">
    <div class="modal-dialog model-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:beige">
                <h5 class="modal-title"><b>Xóa phiếu nhập</b></h5>
                <button type="button" class="close" @onclick="CloseDeleteModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown; font-size:30px">
                <p style="color:red">Bạn có chắc chắn muốn xóa phiếu nhập này không?</p>
                <EditForm Model="@phieuNhap" OnValidSubmit="deletePhieuNhap">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="SoPhieuNhap" class="control-label">Số phiếu nhập: </label>
                        <label><b>@phieuNhap.SoPhieuNhap</b></label>
                    </div>
                    <div class="form-group">
                        <label for="TenKho" class="control-label">Tên kho: </label>
                        <label><b>@phieuNhap.TenKho</b></label>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Xóa phiếu nhập</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Đóng</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


<div class="modal fade @addChiTietModalClass" tabindex="-1" role="dialog" style="@addChiTietModalDisplayStyle">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:#dedcd8">
                <h5 class="modal-title"><b>Thêm chi tiết phiếu nhập</b></h5>
                <button type="button" class="close" @onclick="CloseAddChiTietModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <InputSelect class="form-control" @bind-Value="@newChiTiet.MaLo">
                        <option value="">-- Chọn lô thanh long --</option>
                        @foreach (var item in loThanhLongList)
                        {
                            <option value="@item.Auto_ID">@item.MaLo</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="SoLuong">Số Kg nhập:</label>
                    <InputNumber class="form-control" @bind-Value="newChiTiet.SoKg" />
                </div>
                <div class="form-group">
                    <label for="DonGia">Đơn giá:</label>
                    <InputNumber class="form-control" @bind-Value="newChiTiet.DonGia" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddChiTiet">Thêm</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddChiTietModal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private List<PhieuNhap> dataList = new List<PhieuNhap>();
    private List<HoTrong> hoTrongList = new List<HoTrong>();
    private List<LoThanhLong> loThanhLongList = new List<LoThanhLong>();
    private List<Kho> khoList = new List<Kho>();

    public List<ChiTietPhieuNhap> lstCTPN = new List<ChiTietPhieuNhap>();

    private PhieuNhap phieuNhap = new PhieuNhap();
    private ChiTietPhieuNhap newChiTiet = new ChiTietPhieuNhap();

    private string addModalClass = "";
    private string addModalDisplayStyle = "display:none";
    private string editModalClass = "";
    private string editModalDisplayStyle = "display:none";
    private string deleteModalClass = "";
    private string deleteModalDisplayStyle = "display:none";
    private string addChiTietModalClass = "";
    private string addChiTietModalDisplayStyle = "display:none";

    private string soPhieuNhap;
    private string username;
    private string password;

    protected override async Task OnInitializedAsync()
    {
        try{
        user.username = "C##" + await Users_Service.GetCurrentUserName();
        user.password = await Users_Service.GetCurrentPassWord();
        hoTrongList = await PhieuNhap_Service.getHoTrongData();
        khoList = await PhieuNhap_Service.getKhoData();
        dataList = await PhieuNhap_Service.getAllData();
        loThanhLongList = await PhieuNhap_Service.getLoThanhLongData();
        }
        catch
        {
            Navigation.NavigateTo("/Error");
        }
    }

    private void OpenAddModal()
    {
        phieuNhap = new PhieuNhap();
        addModalClass = "show";
        addModalDisplayStyle = "display:block";
    }

    private void CloseAddModal()
    {
        addModalClass = "";
        addModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void OpenEditModal(PhieuNhap item)
    {
        phieuNhap = item.Shallowcopy();
        soPhieuNhap = item.SoPhieuNhap;

        editModalClass = "show";
        editModalDisplayStyle = "display:block";
    }

    private void CloseEditModal()
    {
        editModalClass = "";
        editModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void OpenDeleteModal(PhieuNhap item)
    {
        phieuNhap = item;
        deleteModalClass = "show";
        deleteModalDisplayStyle = "display:block";
    }

    private void CloseDeleteModal()
    {
        deleteModalClass = "";
        deleteModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void OpenAddChiTietModal()
    {
        newChiTiet = new ChiTietPhieuNhap(); // Khởi tạo chi tiết phiếu nhập mới
        addChiTietModalClass = "show";
        addChiTietModalDisplayStyle = "display:block";
    }

    private void CloseAddChiTietModal()
    {
        addChiTietModalClass = "";
        addChiTietModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void AddChiTiet()
    {
        var loThanhLong = loThanhLongList.FirstOrDefault(l => l.Auto_ID == newChiTiet.MaLo);
        newChiTiet.MaLoSTR = loThanhLong?.MaLo ?? "Không xác định";
        lstCTPN.Add(newChiTiet);
        CloseAddChiTietModal();
    }

    private void RemoveChiTiet(ChiTietPhieuNhap chitiet)
    {
        lstCTPN.Remove(chitiet);
        StateHasChanged();
    }

    protected async Task createPhieuNhap()
    {
        if (await PhieuNhap_Service.isSoPhieuNhapExist(phieuNhap, dataList, "ORACLE"))
        {
            ToastService.ShowError("Mã phiếu nhập đã tồn tại!");
        }
        else
        {
            try
            {
                int autoID = await PhieuNhap_Service.addData(phieuNhap);
                phieuNhap.Auto_ID = autoID;

                foreach(ChiTietPhieuNhap ctpn in lstCTPN)
                {
                    ctpn.SoPhieuNhap = phieuNhap.Auto_ID;
                    await ChiTietPhieuNhap_Service.addData(ctpn);
                }
                dataList= await PhieuNhap_Service.getAllData();
                CloseAddModal();
                ToastService.ShowSuccess("Thêm phiếu nhập thành công!");
                StateHasChanged();
            }
            catch (Exception e)
            {
                //throw e;
                ToastService.ShowError("Có lỗi xảy ra!");
            }
        }
    }

    protected async Task updatePhieuNhap()
    {
        if(await PhieuNhap_Service.isSoPhieuNhapExist(phieuNhap, dataList, soPhieuNhap))
        {
            ToastService.ShowError("Số phiếu nhập đã tồn tại!");
        }
        else
        {
            try
            {
                await PhieuNhap_Service.updateData(phieuNhap);
                dataList = await PhieuNhap_Service.getAllData();
                CloseEditModal();
                ToastService.ShowSuccess("Sửa phiếu nhập thành công!");
                StateHasChanged();
            }
            catch (Exception e)
            {
                //throw e;
                ToastService.ShowError("Có lỗi xảy ra!");
            }
        }
    }

    protected async Task deletePhieuNhap()
    {
        try
        {
            await PhieuNhap_Service.deleteData(phieuNhap.Auto_ID.ToString());
            await ChiTietPhieuNhap_Service.deleteData(phieuNhap.Auto_ID);
            dataList = await PhieuNhap_Service.getAllData();
            CloseDeleteModal();
            ToastService.ShowSuccess("Xóa phiếu nhập thành công!");
            StateHasChanged();
        }
        catch (Exception e)
        {
            //throw e;
            ToastService.ShowError("Có lỗi xảy ra!");
        }
    }

    private void EditItem(GridCommandEventArgs args)
    {
        var item = (PhieuNhap)args.Item;
        OpenEditModal(item);
    }

    private void DeleteItem(GridCommandEventArgs args)
    {
        var item = (PhieuNhap)args.Item;
        OpenDeleteModal(item);
    }

    private void ViewDetails(int Auto_ID)
    {
        Navigation.NavigateTo($"/chitietphieunhap/{Auto_ID}");
    }

    private void ExportReport(string Auto_ID)
    {
        Navigation.NavigateTo($"/reportnhapkho/{Auto_ID}");
    }
}
