@page "/danhmucloaithanhlong"
@rendermode InteractiveServer
@inject LoaiThanhLong_Service LoaiThanhLong_Service
@using SCM_ThanhLong_Group.Model
@inject IToastService ToastService
@inject Users_Service Users_Service
@inject Users user

<style>
    .modal {
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>

<h2 style="text-align:center;font-weight:bold">Danh mục Loại Thanh Long</h2>
<button class="btn btn-success" @onclick="OpenAddModal" style="margin-bottom:10px">
    <span class="oi oi-plus" aria-hidden="true">Thêm loại thanh long mới</span>
</button>

@if (dataList == null)
{
    <p><em>Loading......</em></p>
}
else
{
    <TelerikGrid Data="@dataList" Pageable="true" Sortable="true" Height="calc(100vh - 170px)" Resizable="true" Reorderable="true" Class="telerik-grid">
        <GridColumns>
            <GridColumn Field="@nameof(LoaiThanhLong.MaLoaiThanhLong)" Title="Mã loại thanh long" Width="100px" />
            <GridColumn Field="@nameof(LoaiThanhLong.TenLoaiThanhLong)" Title="Tên loại thanh long" Width="100px" />
            <GridCommandColumn Width="180px">
                <GridCommandButton Command="Edit" OnClick="@EditItem">
                    <span class="oi oi-pencil" Width="100px"></span> Sửa
                </GridCommandButton>
                <GridCommandButton Command="Delete" OnClick="@DeleteItem">
                    <span class="oi oi-trash" Width="100px"></span> Xóa
                </GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
}

<div class="modal fade @addModalClass" tabindex="-1" role="dialog" style="@addModalDisplayStyle">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:beige">
                <h5 class="modal-title"><b>Thêm mới loại thanh long</b></h5>
                <button type="button" class="close" @onclick="CloseAddModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown">
                <EditForm Model="@loaiThanhLong" OnValidSubmit="createLoaiThanhLong">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="MaLoaiThanhLong" class="control-label"><b>Mã loại thanh long: </b></label>
                        <InputText class="form-control" @bind-Value=@loaiThanhLong.MaLoaiThanhLong />
                        <ValidationMessage For="@(() => loaiThanhLong.MaLoaiThanhLong)" />
                    </div>
                    <div class="form-group">
                        <label for="TenLoaiThanhLong" class="control-label"><b>Tên loại thanh long: </b></label>
                        <InputText class="form-control" @bind-Value=@loaiThanhLong.TenLoaiThanhLong />
                        <ValidationMessage For="@(() => loaiThanhLong.TenLoaiThanhLong)" />
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Thêm loại thanh long</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">Đóng</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


<div class="modal fade @editModalClass" tabindex="-1" role="dialog" style="@editModalDisplayStyle">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:beige">
                <h5 class="modal-title"><b>Cập nhật loại thanh long</b></h5>
                <button type="button" class="close" @onclick="CloseEditModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown">
                <EditForm Model="@loaiThanhLong" OnValidSubmit="updateLoaiThanhLong">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="MaLoaiThanhlong" class="control-label"><b>Mã loại thanh long: </b></label>
                        <InputText class="form-control" @bind-Value=@loaiThanhLong.MaLoaiThanhLong />
                        <ValidationMessage For="@(() => loaiThanhLong.MaLoaiThanhLong)" />
                    </div>
                    <div class="form-group">
                        <label for="TenLoaiThanhLong" class="control-label"><b>Tên loại thanh long: </b></label>
                        <InputText class="form-control" @bind-Value=@loaiThanhLong.TenLoaiThanhLong />
                        <ValidationMessage For="@(() => loaiThanhLong.TenLoaiThanhLong)" />
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Cập nhật loại thanh long</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Đóng</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


<div class="modal fade @deleteModalClass" tabindex="-1" role="dialog" style="@deleteModalDisplayStyle">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:beige">
                <h5 class="modal-title"><b>Xóa loại thanh long</b></h5>
                <button type="button" class="close" @onclick="CloseDeleteModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown; font-size:30px">
                <p style="color:red">Bạn có chắc chắn muốn xóa khu vực này không?</p>
                <EditForm Model="@loaiThanhLong" OnValidSubmit="deleteLoaiThanhLong">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="MaLoaiThanhLong" class="control-label">Mã loại thanh long: </label>
                        <label><b>@loaiThanhLong.MaLoaiThanhLong</b></label>
                    </div>
                    <div class="form-group">
                        <label for="TenKhuVuc" class="control-label">Tên loại thanh long: </label>
                        <label><b>@loaiThanhLong.TenLoaiThanhLong</b></label>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Xóa loại thanh long</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Đóng</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>



@code {
    private List<LoaiThanhLong> dataList = new List<LoaiThanhLong>();
    private LoaiThanhLong loaiThanhLong = new LoaiThanhLong();

    private string addModalClass = "";
    private string addModalDisplayStyle = "display:none";
    private string editModalClass = "";
    private string editModalDisplayStyle = "display:none";
    private string deleteModalClass = "";
    private string deleteModalDisplayStyle = "display:none";

    private string maLoaiThanhLong;
    private string tenLoaiThanhLong;

    private string username;
    private string password;

    protected override async Task OnInitializedAsync()
    {
        user.username = "C##" + await Users_Service.GetCurrentUserName();
        user.password = await Users_Service.GetCurrentPassWord();
        dataList = await LoaiThanhLong_Service.getAllData();
    }

    private void OpenAddModal()
    {
        loaiThanhLong = new LoaiThanhLong();
        addModalClass = "show";
        addModalDisplayStyle = "display:block";
    }

    private void CloseAddModal()
    {
        addModalClass = "";
        addModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void OpenEditModal(LoaiThanhLong item)
    {
        loaiThanhLong = item.Shallowcopy();
        maLoaiThanhLong = item.MaLoaiThanhLong;
        tenLoaiThanhLong = item.TenLoaiThanhLong;
        editModalClass = "show";
        editModalDisplayStyle = "display:block";
    }

    private void CloseEditModal()
    {
        editModalClass = "";
        editModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void OpenDeleteModal(LoaiThanhLong item)
    {
        loaiThanhLong = item;
        deleteModalClass = "show";
        deleteModalDisplayStyle = "display:block";
    }

    private void CloseDeleteModal()
    {
        deleteModalClass = "";
        deleteModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    protected async Task createLoaiThanhLong()
    {
        if (await LoaiThanhLong_Service.isMaLoaiThanhLongExist(loaiThanhLong, dataList, "ORACLE"))
        {
            ToastService.ShowError("Mã loại thanh long đã tồn tại!");
        }
        else if (await LoaiThanhLong_Service.isTenLoaiThanhLongExist(loaiThanhLong, dataList, "ORACLE"))
        {
            ToastService.ShowError("Tên loại thanh long đã tồn tại!");
        }
        else
        {
            try
            {
                await LoaiThanhLong_Service.addData(loaiThanhLong);
                dataList = await LoaiThanhLong_Service.getAllData();
                CloseAddModal();
                ToastService.ShowSuccess("Thêm loại thanh long thành công!");
                StateHasChanged();
            }
            catch (Exception)
            {
                ToastService.ShowError("Có lỗi xảy ra!");
            }
        }
    }

    protected async Task updateLoaiThanhLong()
    {
        if (await LoaiThanhLong_Service.isMaLoaiThanhLongExist(loaiThanhLong, dataList, maLoaiThanhLong))
        {
            ToastService.ShowError("Mã loại thanh long đã tồn tại!");
        }
        else if (await LoaiThanhLong_Service.isTenLoaiThanhLongExist(loaiThanhLong, dataList, tenLoaiThanhLong))
        {
            ToastService.ShowError("Tên loại thanh long đã tồn tại!");
        }
        else
        {
            try
            {
                await LoaiThanhLong_Service.updateData(loaiThanhLong);
                dataList = await LoaiThanhLong_Service.getAllData();
                CloseEditModal();
                ToastService.ShowSuccess("Cập nhật loại thanh long thành công!");
            }
            catch (Exception)
            {
                ToastService.ShowError("Có lỗi xảy ra!");
            }
        }
    }

    protected async Task deleteLoaiThanhLong()
    {
        try
        {
            await LoaiThanhLong_Service.deleteData(loaiThanhLong.Auto_ID.ToString());
            dataList = await LoaiThanhLong_Service.getAllData();
            CloseDeleteModal();
            ToastService.ShowSuccess("Xóa loại thanh long thành công!");
            StateHasChanged();
        }
        catch (Exception)
        {
            ToastService.ShowError("Có lỗi xảy ra!");
        }
    }

    private void EditItem(GridCommandEventArgs args)
    {
        var item = (LoaiThanhLong)args.Item;
        OpenEditModal(item);
    }

    private void DeleteItem(GridCommandEventArgs args)
    {
        var item = (LoaiThanhLong)args.Item;
        OpenDeleteModal(item);
    }

}
