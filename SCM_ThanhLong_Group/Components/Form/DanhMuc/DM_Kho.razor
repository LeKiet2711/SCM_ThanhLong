@page "/danhmuckho"
@rendermode InteractiveServer
@inject Kho_Service Kho_Service
@inject IToastService ToastService
@inject Users_Service Users_Service
@inject Users user
@inject NavigationManager NavigationManager

<style>
    .modal {
    background-color: rgba(0, 0, 0, 0.5);
    }

    .container-content {
        margin-left: 1.5vw;
        background: white;
    }
</style>

<span class="chu-dep" style="text-align:center;font-weight:bold">Danh mục kho</span>
<button class="nut-dep" @onclick="OpenAddModal" style="margin-bottom:10px; position: relative;">
    <span class="oi oi-plus" aria-hidden="true">Thêm kho mới</span>
</button>

@if (dataList == null)
{
    <p><em>Loading......</em></p>
}
else
{
    @* <div class="container-table-main">
        <div class="tieu-de-table">
            <span>Thông tin kho</span>
        </div>
        <div class="container-table">
            <table class="style-table">
                <thead>
                    <tr>
                        <th>Mã kho</th>
                        <th>Tên kho</th>
                        <th>Địa chỉ</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Kho data in dataList)
                    {
                        <tr>
                            <td>@data.MaKho</td>
                            <td>@data.TenKho</td>
                            <td>@data.DiaChi</td>
                            <td>
                                <button class="nut-xanh-bang" onclick="@(()=>OpenEditModal(data))">cập nhật</button>
                                <button class="nut-do-bang" onclick="@(()=>OpenDeleteModal(data))">xóa</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div> *@

     <TelerikGrid Data="@dataList" Pageable="true" Sortable="true" Height="calc(100vh - 170px)" Resizable="true" Reorderable="true" Class="telerik-grid"> 
         <GridColumns>
             <GridColumn Field="@nameof(Kho.MaKho)" Title="Mã kho" Width="100px" /> 
             <GridColumn Field="@nameof(Kho.TenKho)" Title="Tên kho" Width="100px" /> 
             <GridColumn Field="@nameof(Kho.DiaChi)" Title="Địa chỉ" Width="100px" /> 
             <GridCommandColumn Width="180px"> 
                 <GridCommandButton Command="Edit" OnClick="@EditItem"> 
                     <span class="oi oi-pencil" Width="100px"></span> Sửa 
                 </GridCommandButton> 
                 <GridCommandButton Command="Delete" OnClick="@DeleteItem"> 
                     <span class="oi oi-trash" Width="100px"></span> Xóa 
                 </GridCommandButton>
             </GridCommandColumn> 
         </GridColumns> 
     </TelerikGrid> 
}

@* Modal cho việc thêm mới *@
<div class="modal fade @addModalClass" tabindex="-1" role="dialog" style="@addModalDisplayStyle">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:beige">
                <h5 class="modal-title"><b>Thêm mới khu vực trồng</b></h5>
                <button type="button" class="close" @onclick="CloseAddModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown">
                <EditForm Model="@kho" OnValidSubmit="createKho">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="MaKho" class="control-label"><b>Mã kho: </b></label>
                        <InputText class="form-control" @bind-Value=@kho.MaKho />
                        <ValidationMessage For="@(() => kho.MaKho)" />
                    </div>
                    <div class="form-group">
                        <label for="TenKho" class="control-label"><b>Tên kho: </b></label>
                        <InputText class="form-control" @bind-Value=@kho.TenKho />
                        <ValidationMessage For="@(() => kho.TenKho)" />
                    </div>
                    <div class="form-group">
                        <label for="DiaChi" class="control-label"><b>Địa chỉ: </b></label>
                        <InputText class="form-control" @bind-Value=@kho.DiaChi />
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Thêm kho</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">Đóng</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@* Modal cho việc chỉnh sửa *@
<div class="modal fade @editModalClass" tabindex="-1" role="dialog" style="@editModalDisplayStyle">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:beige">
                <h5 class="modal-title"><b>Cập nhật kho</b></h5>
                <button type="button" class="close" @onclick="CloseEditModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown">
                <EditForm Model="@kho" OnValidSubmit="updateKho">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="MaKho" class="control-label"><b>Mã kho: </b></label>
                        <InputText class="form-control" @bind-Value=@kho.MaKho />
                        <ValidationMessage For="@(() => kho.MaKho)" />
                    </div>
                    <div class="form-group">
                        <label for="TenKho" class="control-label"><b>Tên kho: </b></label>
                        <InputText class="form-control" @bind-Value=@kho.TenKho />
                        <ValidationMessage For="@(() => kho.TenKho)" />
                    </div>
                    <div class="form-group">
                        <label for="DiaChi" class="control-label"><b>Địa chỉ: </b></label>
                        <InputText class="form-control" @bind-Value=@kho.DiaChi />
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Cập nhật kho</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Đóng</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@* Modal cho việc xóa *@
<div class="modal fade @deleteModalClass" tabindex="-1" role="dialog" style="@deleteModalDisplayStyle">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#2f8f3a; color:beige">
                <h5 class="modal-title"><b>Xóa khu vực trồng</b></h5>
                <button type="button" class="close" @onclick="CloseDeleteModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="background:#dedcd8; color:brown; font-size:30px">
                <p style="color:red">Bạn có chắc chắn muốn xóa khu vực này không?</p>
                <EditForm Model="@kho" OnValidSubmit="deleteKho">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="MaKho" class="control-label">Mã kho: </label>
                        <label><b>@kho.MaKho</b></label>
                    </div>
                    <div class="form-group">
                        <label for="TenKhuVuc" class="control-label">Tên kho: </label>
                        <label><b>@kho.TenKho</b></label>
                    </div>
                    <div class="form-group">
                        <label for="MoTa" class="control-label">Địa chỉ: </label>
                        <label><b>@kho.DiaChi</b></label>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Xóa khu vực trồng</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Đóng</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    private List<Kho> dataList = new List<Kho>();
    private Kho kho = new Kho();

    private string addModalClass = "";
    private string addModalDisplayStyle = "display:none";
    private string editModalClass = "";
    private string editModalDisplayStyle = "display:none";
    private string deleteModalClass = "";
    private string deleteModalDisplayStyle = "display:none";

    private string maKho;
    private string tenKho;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user.username = "C##" + await Users_Service.GetCurrentUserName();
            user.password = await Users_Service.GetCurrentPassWord();
            dataList = await Kho_Service.getAllData();
        }
        catch
        {
            NavigationManager.NavigateTo("/Error");
        }
    }

    private void OpenAddModal()
    {
        kho = new Kho();
        addModalClass = "show";
        addModalDisplayStyle = "display:block";
    }

    private void CloseAddModal()
    {
        addModalClass = "";
        addModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void OpenEditModal(Kho item)
    {
        kho = item.Shallowcopy();
        maKho = kho.MaKho;
        tenKho = kho.TenKho;
        editModalClass = "show";
        editModalDisplayStyle = "display:block";
    }

    private void CloseEditModal()
    {
        editModalClass = "";
        editModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    private void OpenDeleteModal(Kho item)
    {
        kho = item;
        deleteModalClass = "show";
        deleteModalDisplayStyle = "display:block";
    }

    private void CloseDeleteModal()
    {
        deleteModalClass = "";
        deleteModalDisplayStyle = "display:none";
        StateHasChanged();
    }

    protected async Task createKho()
    {
        if (await Kho_Service.isMaKhoExist(kho, dataList, "ORACLE"))
        {

            ToastService.ShowError("Mã kho đã tồn tại!");
        }
        else if (await Kho_Service.isTenKhoExist(kho, dataList, "ORACLE"))
        {
            ToastService.ShowError("Tên kho đã tồn tại!");
        }
        else
        {
            try
            {
                await Kho_Service.addData(kho);
                dataList = await Kho_Service.getAllData();
                CloseAddModal();
                ToastService.ShowSuccess("Thêm kho thành công!");
                StateHasChanged();
            }
            catch (Exception)
            {
                ToastService.ShowError("Có lỗi xảy ra!");
            }
        }
    }

    protected async Task updateKho()
    {
        if (await Kho_Service.isMaKhoExist(kho, dataList, maKho))
        {
            ToastService.ShowError("Mã kho đã tồn tại!");
        }
        else if (await Kho_Service.isTenKhoExist(kho, dataList, tenKho))
        {
            ToastService.ShowError("Tên kho đã tồn tại!");
        }
        else
        {
            try
            {
                await Kho_Service.updateData(kho);
                dataList = await Kho_Service.getAllData();
                CloseEditModal();
                ToastService.ShowSuccess("Cập nhật kho thành công!");
            }
            catch (Exception)
            {
                ToastService.ShowError("Có lỗi xảy ra!");
            }
        }
    }

    protected async Task deleteKho()
    {
        try
        {
            await Kho_Service.deleteData(kho.Auto_ID.ToString());
            dataList = await Kho_Service.getAllData();
            CloseDeleteModal();
            ToastService.ShowSuccess("Xóa kho thành công!");
            StateHasChanged();
        }
        catch (Exception)
        {
            ToastService.ShowError("Có lỗi xảy ra!");
        }
    }

    private void EditItem(GridCommandEventArgs args)
    {
        var item = (Kho)args.Item;
        OpenEditModal(item);
    }

    private void DeleteItem(GridCommandEventArgs args)
    {
        var item = (Kho)args.Item;
        OpenDeleteModal(item);
    }


}
