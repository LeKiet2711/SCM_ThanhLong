@page "/reportxuatkho/{XUATKHO_ID}"
@inject PhieuXuat_Service phieuXuatService

<style>
    .modal {
        background-color: rgba(0, 0, 0, 0.5);
    }

    .container-content {
        margin-left: 1.5vw;
        background: white;
    }
</style>

<PageTitle>Report Viewer</PageTitle>

<ReportViewer ServiceUrl="/api/reports"
              @bind-ReportSource="@ReportSource"
              @bind-ScaleMode="@ScaleMode"
              @bind-ViewMode="@ViewMode"
              @bind-ParametersAreaVisible="@ParametersAreaVisible"
              @bind-DocumentMapVisible="@DocumentMapVisible"
              @bind-Scale="@Scale"
              PageMode="@PageMode.ContinuousScroll"
              PrintMode="@PrintMode.AutoSelect"
              KeepClientAlive="true"
              EnableSendEmail="true"
              ServiceType="@ReportViewerServiceType.REST"
              Height="900px"
              Width="100%">
    <ReportViewerSettings>
        <SendEmailDialogSettings From="lgklgk2711@gmail.com"
                                 Cc=""
                                 Subject="Hóa đơn"
                                 Body="@EmailBody">
        </SendEmailDialogSettings>
    </ReportViewerSettings>
</ReportViewer>

<button class="btn btn-primary d-flex align-items-center" onclick="location.href='nguoiguichukyso'">
    <span aria-hidden="true"></span> Chuyển đến trang ký số
</button>

@code {
    public ScaleMode ScaleMode { get; set; } = ScaleMode.Specific;
    public ViewMode ViewMode { get; set; } = ViewMode.Interactive;
    public bool ParametersAreaVisible { get; set; }
    public bool DocumentMapVisible { get; set; }
    public double Scale { get; set; } = 1.0;
    public DateTime Date;
    public double SoKG;

    [Parameter]
    public string XUATKHO_ID { get; set; }

    public string EmailBody { get; set; }

    public ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions("ReportPhieuXuat_1.trdp", new Dictionary<string, object>
    {

    });

    protected override async Task OnInitializedAsync()
    {
        Date = DateTime.Now;
        SoKG = await phieuXuatService.GetSoKgByID(Int32.Parse(XUATKHO_ID));

        ReportSource.Parameters.Add("XUATKHO_ID", XUATKHO_ID);
        ReportSource.Parameters.Add("SoKG", SoKG);
        ReportSource.Parameters.Add("strSoKG", chuyenSoThanhChu(SoKG));
        EmailBody = $"Hóa đơn phiếu xuất {phieuXuatService.GetSoPhieuXuatByID(Int32.Parse(XUATKHO_ID))} ngày {Date.ToString("dd/MM/yyyy")}";
    }

    static string chuyenSoThanhChu(double number)
    {
        int intPart = (int)number; // Phần nguyên
        int decimalPart = (int)((number - intPart) * 100); // Phần thập phân (2 chữ số)

        string intPartStr = chuyenSoThanhChu(intPart);
        string decimalPartStr = decimalPart > 0 ? chuyenSoThanhChu(decimalPart) : "";

        return decimalPart > 0
            ? $"{intPartStr} phẩy {decimalPartStr}"
            : intPartStr;
    }

    static string chuyenSoThanhChu(int number)
    {
        if (number == 0) return "không";

        string[] ones = { "", "một", "hai", "ba", "bốn", "năm", "sáu", "bảy", "tám", "chín" };
        string[] tens = { "", "", "hai mươi", "ba mươi", "bốn mươi", "năm mươi", "sáu mươi", "bảy mươi", "tám mươi", "chín mươi" };

        string result = "";

        if (number >= 1_000_000_000)
        {
            result += chuyenSoThanhChu(number / 1_000_000_000) + " tỷ ";
            number %= 1_000_000_000;
        }

        if (number >= 1_000_000)
        {
            result += chuyenSoThanhChu(number / 1_000_000) + " triệu ";
            number %= 1_000_000;
        }

        if (number >= 1_000)
        {
            result += chuyenSoThanhChu(number / 1_000) + " nghìn ";
            number %= 1_000;
        }

        if (number >= 100)
        {
            result += ones[number / 100] + " trăm ";
            number %= 100;
        }

        if (number >= 20)
        {
            result += tens[number / 10] + " ";
            number %= 10;
        }
        else if (number >= 10)
        {
            result += "mười ";
            number %= 10;
        }

        // Chỉ thêm "lẻ" nếu hàng chục bằng 0 và có hàng đơn vị
        if (number > 0 && result.EndsWith("trăm "))
        {
            result += "lẻ ";
        }

        if (number > 0)
        {
            result += ones[number];
        }

        return result.Trim();
    }
}
